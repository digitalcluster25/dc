// üîí Password Utils for AUTH_MODULE

import bcrypt from 'bcryptjs';
import crypto from 'crypto';

const SALT_ROUNDS = 12;

/**
 * –ó–∞—Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
 */
export async function hashPassword(password: string): Promise<string> {
  try {
    const salt = await bcrypt.genSalt(SALT_ROUNDS);
    const hashedPassword = await bcrypt.hash(password, salt);
    return hashedPassword;
  } catch (error) {
    console.error('Password hashing failed:', error);
    throw new Error('Failed to hash password');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å
 */
export async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {
  try {
    const isValid = await bcrypt.compare(password, hashedPassword);
    return isValid;
  } catch (error) {
    console.error('Password verification failed:', error);
    return false;
  }
}

/**
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω
 */
export function generateRandomToken(length: number = 32): string {
  return crypto.randomBytes(length).toString('hex');
}

/**
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π refresh token
 */
export function generateRefreshToken(): string {
  return generateRandomToken(64);
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
 */
export interface PasswordStrength {
  isValid: boolean;
  score: number; // 0-100
  errors: string[];
  suggestions: string[];
}

export function validatePasswordStrength(password: string): PasswordStrength {
  const errors: string[] = [];
  const suggestions: string[] = [];
  let score = 0;

  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
  if (password.length < 8) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
  } else {
    score += 20;
  }

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
  if (password.length > 128) {
    errors.push('–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 128 —Å–∏–º–≤–æ–ª–æ–≤');
    return { isValid: false, score: 0, errors, suggestions };
  }

  // –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
  if (!/[A-Z]/.test(password)) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã');
    suggestions.push('–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã');
  } else {
    score += 15;
  }

  // –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
  if (!/[a-z]/.test(password)) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã');
    suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã');
  } else {
    score += 15;
  }

  // –¶–∏—Ñ—Ä—ã
  if (!/\d/.test(password)) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã');
    suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã');
  } else {
    score += 15;
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (!/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
    errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã');
    suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (!@#$%^&*)');
  } else {
    score += 15;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –¥–ª–∏–Ω—É
  if (password.length >= 12) {
    score += 10;
  }
  if (password.length >= 16) {
    score += 10;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
  const commonPasswords = [
    'password', '123456', '123456789', 'qwerty', 'abc123',
    'password123', 'admin', 'letmein', 'welcome', 'monkey'
  ];
  
  if (commonPasswords.includes(password.toLowerCase())) {
    errors.push('–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π');
    suggestions.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    score = Math.max(0, score - 30);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
  if (/(.)\1{2,}/.test(password)) {
    suggestions.push('–ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤');
    score = Math.max(0, score - 10);
  }

  const isValid = errors.length === 0 && score >= 60;

  return {
    isValid,
    score: Math.min(100, score),
    errors,
    suggestions
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
 * (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Have I Been Pwned API)
 */
export async function checkPasswordBreach(password: string): Promise<boolean> {
  try {
    // –°–æ–∑–¥–∞–µ–º SHA-1 —Ö–µ—à –ø–∞—Ä–æ–ª—è
    const hash = crypto.createHash('sha1').update(password).digest('hex').toUpperCase();
    const prefix = hash.substring(0, 5);
    const suffix = hash.substring(5);

    // –ó–∞–ø—Ä–æ—Å –∫ API Have I Been Pwned
    const response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`);
    
    if (!response.ok) {
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—á–∏—Ç–∞–µ–º –ø–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
      return false;
    }

    const data = await response.text();
    const lines = data.split('\n');

    // –ò—â–µ–º –Ω–∞—à —Ö–µ—à –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    for (const line of lines) {
      const [hashSuffix] = line.split(':');
      if (hashSuffix === suffix) {
        return true; // –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —É—Ç–µ—á–µ–∫
      }
    }

    return false; // –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —É—Ç–µ—á–µ–∫
  } catch (error) {
    console.error('Password breach check failed:', error);
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º –ø–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
    return false;
  }
}

/**
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
 */
export function generateSecurePassword(length: number = 16): string {
  const lowercase = 'abcdefghijklmnopqrstuvwxyz';
  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const numbers = '0123456789';
  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';

  const allChars = lowercase + uppercase + numbers + symbols;
  let password = '';

  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
  password += lowercase[Math.floor(Math.random() * lowercase.length)];
  password += uppercase[Math.floor(Math.random() * uppercase.length)];
  password += numbers[Math.floor(Math.random() * numbers.length)];
  password += symbols[Math.floor(Math.random() * symbols.length)];

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
  for (let i = 4; i < length; i++) {
    password += allChars[Math.floor(Math.random() * allChars.length)];
  }

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
  return password.split('').sort(() => Math.random() - 0.5).join('');
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
 */
export function clearSensitiveData(data: string): void {
  // –í JavaScript –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏,
  // –Ω–æ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  if (typeof data === 'string') {
    // –≠—Ç–æ –±–æ–ª—å—à–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç, —á–µ–º —Ä–µ–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    data = '*'.repeat(data.length);
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Å–æ–ª—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function generateSalt(): string {
  return crypto.randomBytes(32).toString('hex');
}

/**
 * –°–æ–∑–¥–∞—Ç—å —Ö–µ—à —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–æ–ª—å—é
 */
export function createSaltedHash(data: string, salt: string): string {
  return crypto.createHash('sha256').update(data + salt).digest('hex');
}
