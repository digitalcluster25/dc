// üõ°Ô∏è Authentication Middleware for AUTH_MODULE

import { NextRequest, NextResponse } from 'next/server';
import { verifyAccessToken, extractTokenFromHeader } from './jwt';
import { UserRole, JWTPayload } from '../types/auth.types';

export interface AuthenticatedRequest extends NextRequest {
  user: JWTPayload;
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export async function requireAuth(request: NextRequest): Promise<JWTPayload> {
  const authHeader = request.headers.get('authorization');
  const token = extractTokenFromHeader(authHeader);

  if (!token) {
    throw new Error('UNAUTHORIZED: No token provided');
  }

  const payload = await verifyAccessToken(token);
  if (!payload) {
    throw new Error('UNAUTHORIZED: Invalid token');
  }

  return payload;
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function requireRole(
  request: NextRequest, 
  allowedRoles: UserRole[]
): Promise<JWTPayload> {
  const user = await requireAuth(request);

  if (!allowedRoles.includes(user.role)) {
    throw new Error('FORBIDDEN: Insufficient permissions');
  }

  return user;
}

/**
 * Middleware –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
 */
export async function requireAdmin(request: NextRequest): Promise<JWTPayload> {
  return requireRole(request, ['admin']);
}

/**
 * Middleware –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤
 */
export async function requireUser(request: NextRequest): Promise<JWTPayload> {
  return requireRole(request, ['user', 'admin']);
}

/**
 * –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–Ω–µ –±—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫—É)
 */
export async function optionalAuth(request: NextRequest): Promise<JWTPayload | null> {
  try {
    return await requireAuth(request);
  } catch {
    return null;
  }
}

/**
 * Wrapper –¥–ª—è API routes —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */
export function withAuth(
  handler: (request: NextRequest, user: JWTPayload) => Promise<NextResponse>
) {
  return async (request: NextRequest): Promise<NextResponse> => {
    try {
      const user = await requireAuth(request);
      return handler(request, user);
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Authentication failed';
      
      if (message.startsWith('UNAUTHORIZED')) {
        return NextResponse.json(
          { error: 'Unauthorized', message: 'Please login to access this resource' },
          { status: 401 }
        );
      }
      
      if (message.startsWith('FORBIDDEN')) {
        return NextResponse.json(
          { error: 'Forbidden', message: 'You do not have permission to access this resource' },
          { status: 403 }
        );
      }

      return NextResponse.json(
        { error: 'Authentication Error', message },
        { status: 401 }
      );
    }
  };
}

/**
 * Wrapper –¥–ª—è API routes —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏
 */
export function withRole(
  allowedRoles: UserRole[],
  handler: (request: NextRequest, user: JWTPayload) => Promise<NextResponse>
) {
  return async (request: NextRequest): Promise<NextResponse> => {
    try {
      const user = await requireRole(request, allowedRoles);
      return handler(request, user);
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Authorization failed';
      
      if (message.startsWith('UNAUTHORIZED')) {
        return NextResponse.json(
          { error: 'Unauthorized', message: 'Please login to access this resource' },
          { status: 401 }
        );
      }
      
      if (message.startsWith('FORBIDDEN')) {
        return NextResponse.json(
          { error: 'Forbidden', message: 'You do not have permission to access this resource' },
          { status: 403 }
        );
      }

      return NextResponse.json(
        { error: 'Authorization Error', message },
        { status: 403 }
      );
    }
  };
}

/**
 * Wrapper —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
 */
export function withAdmin(
  handler: (request: NextRequest, user: JWTPayload) => Promise<NextResponse>
) {
  return withRole(['admin'], handler);
}

/**
 * Wrapper –¥–ª—è –ª—é–±—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export function withUser(
  handler: (request: NextRequest, user: JWTPayload) => Promise<NextResponse>
) {
  return withRole(['user', 'admin'], handler);
}

/**
 * Rate limiting middleware
 */
const rateLimitStore = new Map<string, { count: number; resetTime: number }>();

export function rateLimit(
  maxRequests: number = 10,
  windowMs: number = 60000 // 1 minute
) {
  return async (request: NextRequest): Promise<boolean> => {
    const ip = request.ip || request.headers.get('x-forwarded-for') || 'unknown';
    const now = Date.now();
    const key = `${ip}`;

    const current = rateLimitStore.get(key);
    
    if (!current || now > current.resetTime) {
      // –ù–æ–≤–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Å–±—Ä–æ—Å
      rateLimitStore.set(key, {
        count: 1,
        resetTime: now + windowMs
      });
      return true;
    }

    if (current.count >= maxRequests) {
      return false; // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    current.count++;
    return true;
  };
}

/**
 * Wrapper —Å rate limiting
 */
export function withRateLimit(
  maxRequests: number = 10,
  windowMs: number = 60000,
  handler: (request: NextRequest) => Promise<NextResponse>
) {
  const checkRateLimit = rateLimit(maxRequests, windowMs);
  
  return async (request: NextRequest): Promise<NextResponse> => {
    const allowed = await checkRateLimit(request);
    
    if (!allowed) {
      return NextResponse.json(
        { 
          error: 'Rate Limit Exceeded', 
          message: `Too many requests. Try again later.` 
        },
        { status: 429 }
      );
    }

    return handler(request);
  };
}

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π wrapper —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ rate limiting
 */
export function withAuthAndRateLimit(
  maxRequests: number = 100,
  windowMs: number = 60000,
  handler: (request: NextRequest, user: JWTPayload) => Promise<NextResponse>
) {
  return withRateLimit(maxRequests, windowMs, withAuth(handler));
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email verification
 */
export async function requireEmailVerified(user: JWTPayload): Promise<void> {
  // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  // –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
  console.log('Checking email verification for user:', user.userId);
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ cookie
 */
export function extractUserFromCookies(request: NextRequest): JWTPayload | null {
  try {
    const token = request.cookies.get('access_token')?.value;
    if (!token) return null;

    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
    // –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    return null;
  } catch {
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –¥–ª—è API
 */
export function corsHeaders(origin?: string) {
  const allowedOrigins = [
    'http://localhost:3000',
    'http://localhost:3080',
    'https://railway-saas.com',
    process.env.FRONTEND_URL
  ].filter(Boolean);

  const corsOrigin = origin && allowedOrigins.includes(origin) ? origin : allowedOrigins[0];

  return {
    'Access-Control-Allow-Origin': corsOrigin || '*',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Credentials': 'true',
  };
}

/**
 * Wrapper –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è CORS headers
 */
export function withCors(
  handler: (request: NextRequest) => Promise<NextResponse>
) {
  return async (request: NextRequest): Promise<NextResponse> => {
    // Handle preflight requests
    if (request.method === 'OPTIONS') {
      return new NextResponse(null, {
        status: 200,
        headers: corsHeaders(request.headers.get('origin') || undefined)
      });
    }

    const response = await handler(request);
    
    // Add CORS headers to response
    const headers = corsHeaders(request.headers.get('origin') || undefined);
    Object.entries(headers).forEach(([key, value]) => {
      response.headers.set(key, value);
    });

    return response;
  };
}
