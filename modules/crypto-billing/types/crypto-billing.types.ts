// üíé Crypto Billing Types for CRYPTO_BILLING_MODULE

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
export type CryptoCurrency = 'USDT' | 'USDC' | 'BUSD' | 'BTC' | 'ETH' | 'MATIC';

// Blockchain —Å–µ—Ç–∏
export type BlockchainNetwork = 'ethereum' | 'polygon' | 'bsc' | 'bitcoin' | 'tron';

// –¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤ (10‚Ç¨ –∑–∞ –∫–∞–∂–¥—ã–π)
export type ServiceType = 
  | 'wordpress'
  | 'nextjs'
  | 'api'
  | 'database'
  | 'docker'
  | 'static-site';

// –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞
export type PaymentStatus = 
  | 'pending'      // –û–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  | 'confirming'   // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
  | 'confirmed'    // –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
  | 'completed'    // –°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
  | 'expired'      // –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
  | 'failed';      // –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
export interface CryptoCurrencyInfo {
  symbol: CryptoCurrency;
  name: string;
  network: BlockchainNetwork;
  decimals: number;
  contractAddress?: string; // –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ ERC-20
  icon: string;
  isStablecoin: boolean;
  minConfirmations: number;
  avgConfirmationTime: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
}

// –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
export interface CryptoRate {
  currency: CryptoCurrency;
  priceUSD: number;
  priceEUR: number;
  change24h: number;
  lastUpdated: Date;
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
export interface ServiceInfo {
  type: ServiceType;
  name: string;
  description: string;
  icon: string;
  priceEUR: number; // 10‚Ç¨ –¥–ª—è –≤—Å–µ—Ö –≤ MVP
  features: string[];
  deploymentTime: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
export interface CreatePaymentRequest {
  userId: string;
  serviceType: ServiceType;
  cryptoCurrency: CryptoCurrency;
  network?: BlockchainNetwork;
}

// –û—Ç–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
export interface CreatePaymentResponse {
  success: boolean;
  message: string;
  payment?: CryptoPayment;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
export interface CryptoPayment {
  id: string;
  userId: string;
  serviceType: ServiceType;
  cryptoCurrency: CryptoCurrency;
  network: BlockchainNetwork;
  
  // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  priceEUR: number;
  priceUSD: number;
  cryptoAmount: string; // –í —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
  exchangeRate: number;
  
  // Wallet –¥–∞–Ω–Ω—ã–µ
  paymentAddress: string;
  privateKey?: string; // –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  qrCode: string; // Base64 QR –∫–æ–¥
  
  // –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  status: PaymentStatus;
  createdAt: Date;
  expiresAt: Date;
  confirmedAt?: Date;
  completedAt?: Date;
  
  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
  transactionHash?: string;
  blockHeight?: number;
  confirmations: number;
  requiredConfirmations: number;
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  userAgent?: string;
  ipAddress?: string;
  refundAddress?: string;
}

// –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export interface TransactionHistory {
  id: string;
  paymentId: string;
  txHash: string;
  blockHeight: number;
  confirmations: number;
  amount: string;
  from: string;
  to: string;
  gasUsed?: number;
  gasPrice?: string;
  timestamp: Date;
  status: 'pending' | 'confirmed' | 'failed';
}

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
export interface UserCryptoBalance {
  userId: string;
  availableCredits: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  totalPaidEUR: number;
  totalTransactions: number;
  lastPaymentDate?: Date;
  preferredCurrency?: CryptoCurrency;
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞
export interface PaymentAnalytics {
  totalPayments: number;
  totalVolumeEUR: number;
  totalVolumeUSD: number;
  paymentsByCurrency: Record<CryptoCurrency, number>;
  paymentsByService: Record<ServiceType, number>;
  conversionRate: number; // % —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  averageConfirmationTime: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  popularCurrencies: CryptoCurrency[];
  recentTransactions: CryptoPayment[];
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
export interface WalletConfig {
  network: BlockchainNetwork;
  masterSeed: string;
  derivationPath: string;
  addressIndex: number;
  privateKey: string;
  publicKey: string;
  address: string;
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫—á–µ–π–Ω–∞
export interface BlockchainMonitor {
  network: BlockchainNetwork;
  currency: CryptoCurrency;
  lastBlockHeight: number;
  lastUpdateTime: Date;
  isOnline: boolean;
  avgBlockTime: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  pendingTransactions: number;
}

// API –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
export interface CheckPaymentRequest {
  paymentId: string;
}

export interface CheckPaymentResponse {
  success: boolean;
  payment: CryptoPayment;
  transactionInfo?: {
    hash: string;
    confirmations: number;
    amount: string;
    timestamp: Date;
  };
}

export interface GetRatesResponse {
  success: boolean;
  rates: CryptoRate[];
  lastUpdated: Date;
}

export interface ConfirmPaymentRequest {
  paymentId: string;
  transactionHash: string;
  blockHeight?: number;
}

export interface ConfirmPaymentResponse {
  success: boolean;
  message: string;
  serviceActivated: boolean;
  serviceDetails?: {
    type: ServiceType;
    endpoint?: string;
    credentials?: Record<string, string>;
  };
}

// Errors –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
export interface CryptoPaymentError {
  code: string;
  message: string;
  field?: string;
}

export const CRYPTO_ERROR_CODES = {
  INVALID_CURRENCY: 'INVALID_CURRENCY',
  INSUFFICIENT_AMOUNT: 'INSUFFICIENT_AMOUNT',
  PAYMENT_EXPIRED: 'PAYMENT_EXPIRED',
  TRANSACTION_FAILED: 'TRANSACTION_FAILED',
  NETWORK_ERROR: 'NETWORK_ERROR',
  WALLET_ERROR: 'WALLET_ERROR',
  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',
  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',
} as const;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª—é—Ç
export const SUPPORTED_CURRENCIES: CryptoCurrencyInfo[] = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ Stablecoins
  {
    symbol: 'USDT',
    name: 'Tether USD',
    network: 'ethereum',
    decimals: 6,
    contractAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
    icon: '/crypto/usdt.svg',
    isStablecoin: true,
    minConfirmations: 12,
    avgConfirmationTime: 3
  },
  {
    symbol: 'USDC',
    name: 'USD Coin',
    network: 'ethereum',
    decimals: 6,
    contractAddress: '0xA0b86a33E6441c8f6532D93d85b8C1b4cf6d1b85',
    icon: '/crypto/usdc.svg',
    isStablecoin: true,
    minConfirmations: 12,
    avgConfirmationTime: 3
  },
  {
    symbol: 'BUSD',
    name: 'Binance USD',
    network: 'bsc',
    decimals: 18,
    contractAddress: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',
    icon: '/crypto/busd.svg',
    isStablecoin: true,
    minConfirmations: 20,
    avgConfirmationTime: 1
  },
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
  {
    symbol: 'BTC',
    name: 'Bitcoin',
    network: 'bitcoin',
    decimals: 8,
    icon: '/crypto/btc.svg',
    isStablecoin: false,
    minConfirmations: 3,
    avgConfirmationTime: 10
  },
  {
    symbol: 'ETH',
    name: 'Ethereum',
    network: 'ethereum',
    decimals: 18,
    icon: '/crypto/eth.svg',
    isStablecoin: false,
    minConfirmations: 12,
    avgConfirmationTime: 3
  },
  {
    symbol: 'MATIC',
    name: 'Polygon',
    network: 'polygon',
    decimals: 18,
    icon: '/crypto/matic.svg',
    isStablecoin: false,
    minConfirmations: 128,
    avgConfirmationTime: 1
  }
];

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
export const SERVICE_CATALOG: ServiceInfo[] = [
  {
    type: 'wordpress',
    name: 'WordPress CMS',
    description: '–ì–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é',
    icon: 'üìù',
    priceEUR: 10,
    features: ['WordPress 6.0+', 'Admin –ø–∞–Ω–µ–ª—å', 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '1GB —Ö—Ä–∞–Ω–∏–ª–∏—â–µ'],
    deploymentTime: 5
  },
  {
    type: 'nextjs',
    name: 'Next.js App',
    description: 'React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å SSR',
    icon: '‚ö°',
    priceEUR: 10,
    features: ['Next.js 13+', 'SSR/SSG', 'TypeScript', 'Vercel –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'],
    deploymentTime: 3
  },
  {
    type: 'api',
    name: 'REST API Service',
    description: 'Backend API –Ω–∞ Node.js',
    icon: 'üîß',
    priceEUR: 10,
    features: ['Node.js 18+', 'Express.js', 'API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', 'Rate limiting'],
    deploymentTime: 2
  },
  {
    type: 'database',
    name: 'Database Service',
    description: 'PostgreSQL –∏–ª–∏ MongoDB',
    icon: 'üóÉÔ∏è',
    priceEUR: 10,
    features: ['PostgreSQL 15', '–ê–≤—Ç–æ–±—ç–∫–∞–ø—ã', '10GB —Ö—Ä–∞–Ω–∏–ª–∏—â–µ', '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'],
    deploymentTime: 2
  },
  {
    type: 'docker',
    name: 'Docker Container',
    description: '–ö–∞—Å—Ç–æ–º–Ω—ã–π Docker –æ–±—Ä–∞–∑',
    icon: 'üê≥',
    priceEUR: 10,
    features: ['Docker –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'CI/CD', 'Health checks', 'Logs'],
    deploymentTime: 4
  },
  {
    type: 'static-site',
    name: 'Static Website',
    description: 'HTML/CSS/JS —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–∞–π—Ç',
    icon: 'üåê',
    priceEUR: 10,
    features: ['CDN –¥–æ—Å—Ç–∞–≤–∫–∞', 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', 'Custom –¥–æ–º–µ–Ω', '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ'],
    deploymentTime: 1
  }
];

// Utility —Ç–∏–ø—ã
export type CryptoCurrencySymbol = CryptoCurrencyInfo['symbol'];
export type ServiceTypeKey = ServiceInfo['type'];

// Context —Ç–∏–ø—ã –¥–ª—è React
export interface CryptoBillingContextType {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  currentPayment: CryptoPayment | null;
  userBalance: UserCryptoBalance | null;
  cryptoRates: CryptoRate[];
  loading: boolean;
  
  // –ú–µ—Ç–æ–¥—ã
  createPayment: (request: CreatePaymentRequest) => Promise<CryptoPayment | null>;
  checkPayment: (paymentId: string) => Promise<CryptoPayment | null>;
  getCryptoRates: () => Promise<CryptoRate[]>;
  getUserBalance: (userId: string) => Promise<UserCryptoBalance | null>;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  formatCryptoAmount: (amount: string, currency: CryptoCurrency) => string;
  calculatePrice: (priceEUR: number, currency: CryptoCurrency) => string;
  generateQRCode: (address: string, amount: string, currency: CryptoCurrency) => Promise<string>;
}
