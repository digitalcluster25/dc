// üîê Wallet Generator Library for CRYPTO_BILLING_MODULE

import { CryptoCurrency, BlockchainNetwork, WalletConfig } from '../types/crypto-billing.types';
import { getNetworkByCurrency } from '../utils/constants';
import { validateCryptoAddress } from '../utils/formatters';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
 */
interface WalletGenerator {
  generateWallet(derivationIndex: number): Promise<WalletConfig>;
  validateAddress(address: string): boolean;
  getBalance(address: string): Promise<string>;
}

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤
 */
abstract class BaseWalletGenerator implements WalletGenerator {
  protected masterSeed: string;
  protected network: BlockchainNetwork;

  constructor(masterSeed: string, network: BlockchainNetwork) {
    this.masterSeed = masterSeed;
    this.network = network;
  }

  abstract generateWallet(derivationIndex: number): Promise<WalletConfig>;
  abstract validateAddress(address: string): boolean;
  abstract getBalance(address: string): Promise<string>;
}

/**
 * Bitcoin –∫–æ—à–µ–ª–µ–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ)
 */
class BitcoinWalletGenerator extends BaseWalletGenerator {
  async generateWallet(derivationIndex: number): Promise<WalletConfig> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è bitcoinjs-lib
    // –î–ª—è –¥–µ–º–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    
    const derivationPath = `m/44'/0'/0'/0/${derivationIndex}`;
    const fakePrivateKey = this.generateFakePrivateKey(derivationIndex);
    const fakePublicKey = this.generateFakePublicKey(fakePrivateKey);
    const fakeAddress = this.generateFakeBitcoinAddress(fakePublicKey);

    return {
      network: 'bitcoin',
      masterSeed: this.masterSeed,
      derivationPath,
      addressIndex: derivationIndex,
      privateKey: fakePrivateKey,
      publicKey: fakePublicKey,
      address: fakeAddress
    };
  }

  validateAddress(address: string): boolean {
    return /^(1|3|bc1)[a-zA-HJ-NP-Z0-9]{25,62}$/.test(address);
  }

  async getBalance(address: string): Promise<string> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ BlockCypher –∏–ª–∏ –¥—Ä—É–≥–æ–º—É API
    return '0.00000000';
  }

  private generateFakePrivateKey(index: number): string {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ seed + index
    const combined = `${this.masterSeed}-${index}`;
    let hash = 0;
    
    for (let i = 0; i < combined.length; i++) {
      const char = combined.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32-bit integer
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ hex —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω–æ–π 64 —Å–∏–º–≤–æ–ª–∞
    const hexHash = Math.abs(hash).toString(16).padStart(8, '0');
    return hexHash.repeat(8).substring(0, 64);
  }

  private generateFakePublicKey(privateKey: string): string {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    return '04' + privateKey + privateKey.substring(0, 62);
  }

  private generateFakeBitcoinAddress(publicKey: string): string {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fake Bitcoin –∞–¥—Ä–µ—Å
    const hash = publicKey.substring(2, 42);
    return '1' + this.base58Encode(hash).substring(0, 33);
  }

  private base58Encode(hex: string): string {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è Base58 –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–µ–º–æ
    const alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    let result = '';
    let num = BigInt('0x' + hex);
    
    while (num > 0) {
      result = alphabet[Number(num % 58n)] + result;
      num = num / 58n;
    }
    
    return result || '1';
  }
}

/**
 * Ethereum –∫–æ—à–µ–ª–µ–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ)
 */
class EthereumWalletGenerator extends BaseWalletGenerator {
  async generateWallet(derivationIndex: number): Promise<WalletConfig> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ethers –∏–ª–∏ web3.js
    
    const derivationPath = `m/44'/60'/0'/0/${derivationIndex}`;
    const fakePrivateKey = this.generateFakePrivateKey(derivationIndex);
    const fakePublicKey = this.generateFakePublicKey(fakePrivateKey);
    const fakeAddress = this.generateFakeEthereumAddress(fakePublicKey);

    return {
      network: this.network,
      masterSeed: this.masterSeed,
      derivationPath,
      addressIndex: derivationIndex,
      privateKey: fakePrivateKey,
      publicKey: fakePublicKey,
      address: fakeAddress
    };
  }

  validateAddress(address: string): boolean {
    return /^0x[a-fA-F0-9]{40}$/.test(address);
  }

  async getBalance(address: string): Promise<string> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ Infura –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
    return '0.000000000000000000';
  }

  private generateFakePrivateKey(index: number): string {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ Bitcoin –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É
    const combined = `${this.masterSeed}-${this.network}-${index}`;
    let hash = 0;
    
    for (let i = 0; i < combined.length; i++) {
      const char = combined.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    
    const hexHash = Math.abs(hash).toString(16).padStart(8, '0');
    return hexHash.repeat(8).substring(0, 64);
  }

  private generateFakePublicKey(privateKey: string): string {
    return '04' + privateKey + privateKey.substring(0, 62);
  }

  private generateFakeEthereumAddress(publicKey: string): string {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fake Ethereum –∞–¥—Ä–µ—Å
    const hash = publicKey.substring(2, 42);
    return '0x' + hash.toLowerCase();
  }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤
 */
export class WalletGeneratorFactory {
  private static generators: Map<BlockchainNetwork, WalletGenerator> = new Map();
  
  static createGenerator(currency: CryptoCurrency, masterSeed?: string): WalletGenerator {
    const network = getNetworkByCurrency(currency);
    const seed = masterSeed || process.env.MASTER_SEED_PHRASE || 'demo-seed-phrase-for-testing-only';
    
    if (!this.generators.has(network)) {
      switch (network) {
        case 'bitcoin':
          this.generators.set(network, new BitcoinWalletGenerator(seed, network));
          break;
        case 'ethereum':
        case 'polygon':
        case 'bsc':
          this.generators.set(network, new EthereumWalletGenerator(seed, network));
          break;
        default:
          throw new Error(`Unsupported network: ${network}`);
      }
    }
    
    return this.generators.get(network)!;
  }
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export class PaymentWalletManager {
  private usedIndexes: Set<number> = new Set();
  private maxRetries = 100;

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
   */
  async generatePaymentWallet(currency: CryptoCurrency, paymentId: string): Promise<WalletConfig> {
    const generator = WalletGeneratorFactory.createGenerator(currency);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ paymentId
    let derivationIndex = this.generateDeterministicIndex(paymentId);
    let retries = 0;
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–Ω–¥–µ–∫—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
    while (this.usedIndexes.has(derivationIndex) && retries < this.maxRetries) {
      derivationIndex = (derivationIndex + 1) % 2147483647; // Max safe integer
      retries++;
    }
    
    if (retries >= this.maxRetries) {
      throw new Error('Unable to generate unique wallet address');
    }
    
    const wallet = await generator.generateWallet(derivationIndex);
    this.usedIndexes.add(derivationIndex);
    
    console.log(`Generated ${currency} wallet for payment ${paymentId}:`, {
      address: wallet.address,
      derivationIndex,
      network: wallet.network
    });
    
    return wallet;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  async getWalletBalance(address: string, currency: CryptoCurrency): Promise<string> {
    const generator = WalletGeneratorFactory.createGenerator(currency);
    return await generator.getBalance(address);
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  validateWalletAddress(address: string, currency: CryptoCurrency): boolean {
    const generator = WalletGeneratorFactory.createGenerator(currency);
    return generator.validateAddress(address);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ paymentId
   */
  private generateDeterministicIndex(paymentId: string): number {
    let hash = 0;
    
    for (let i = 0; i < paymentId.length; i++) {
      const char = paymentId.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32-bit integer
    }
    
    return Math.abs(hash) % 1000000; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1–ú –¥–ª—è –Ω–∞—á–∞–ª–∞
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
   */
  cleanup() {
    this.usedIndexes.clear();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getStats() {
    return {
      totalWalletsGenerated: this.usedIndexes.size,
      unusedIndexes: 1000000 - this.usedIndexes.size
    };
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å HD –∫–æ—à–µ–ª—å–∫–∞–º–∏
 */
export class HDWalletUtils {
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã (–¥–ª—è –¥–µ–º–æ)
   */
  static generateMnemonic(): string {
    const words = [
      'abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract',
      'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid',
      'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actress', 'actual'
    ];
    
    return Array.from({ length: 12 }, () => 
      words[Math.floor(Math.random() * words.length)]
    ).join(' ');
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
   */
  static validateMnemonic(mnemonic: string): boolean {
    const words = mnemonic.trim().split(' ');
    return words.length === 12 || words.length === 24;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–µ—Ä–∏–≤–∞—Ü–∏–∏
   */
  static getDerivationPath(currency: CryptoCurrency, account: number = 0, addressIndex: number = 0): string {
    const coinTypes = {
      'BTC': 0,
      'ETH': 60,
      'USDT': 60, // ERC-20
      'USDC': 60, // ERC-20
      'BUSD': 60, // BEP-20 (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å ERC-20)
      'MATIC': 60 // ERC-20
    };
    
    const coinType = coinTypes[currency] || 60;
    return `m/44'/${coinType}'/${account}'/0/${addressIndex}`;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
   */
  static formatPrivateKey(privateKey: string, format: 'hex' | 'wif' | 'buffer' = 'hex'): string {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ
    switch (format) {
      case 'hex':
        return privateKey.startsWith('0x') ? privateKey : '0x' + privateKey;
      case 'wif':
        return 'WIF_' + privateKey; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è WIF —Ñ–æ—Ä–º–∞—Ç–∞
      case 'buffer':
        return `Buffer(${privateKey})`;
      default:
        return privateKey;
    }
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
 */
export class SecureKeyStore {
  private keys: Map<string, string> = new Map();
  private encryptionKey: string;

  constructor(encryptionKey?: string) {
    this.encryptionKey = encryptionKey || process.env.CRYPTO_BILLING_SECRET || 'default-encryption-key';
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
   */
  storePrivateKey(walletId: string, privateKey: string): void {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    const encrypted = this.simpleEncrypt(privateKey);
    this.keys.set(walletId, encrypted);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π)
   */
  getPrivateKey(walletId: string): string | null {
    const encrypted = this.keys.get(walletId);
    if (!encrypted) return null;
    
    return this.simpleDecrypt(encrypted);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
   */
  removePrivateKey(walletId: string): void {
    this.keys.delete(walletId);
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ (–ù–ï –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!)
   */
  private simpleEncrypt(data: string): string {
    // –î–ª—è –¥–µ–º–æ - –ø—Ä–æ—Å—Ç–æ–π XOR, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ AES
    return Buffer.from(data).toString('base64');
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–ª—è –¥–µ–º–æ
   */
  private simpleDecrypt(encrypted: string): string {
    return Buffer.from(encrypted, 'base64').toString();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
   */
  clear(): void {
    this.keys.clear();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
   */
  size(): number {
    return this.keys.size;
  }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã
 */
export const paymentWalletManager = new PaymentWalletManager();
export const secureKeyStore = new SecureKeyStore();

/**
 * –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
export async function generatePaymentAddress(currency: CryptoCurrency, paymentId: string): Promise<{ address: string; privateKey: string }> {
  const wallet = await paymentWalletManager.generatePaymentWallet(currency, paymentId);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  secureKeyStore.storePrivateKey(paymentId, wallet.privateKey);
  
  return {
    address: wallet.address,
    privateKey: wallet.privateKey // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ)
  };
}

export async function getAddressBalance(address: string, currency: CryptoCurrency): Promise<string> {
  return await paymentWalletManager.getWalletBalance(address, currency);
}

export function validateAddress(address: string, currency: CryptoCurrency): boolean {
  return paymentWalletManager.validateWalletAddress(address, currency);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
 */
export function initializeWalletModule() {
  console.log('üîê Wallet generator module initialized');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ master seed
  const masterSeed = process.env.MASTER_SEED_PHRASE;
  if (!masterSeed || masterSeed === 'demo-seed-phrase-for-testing-only') {
    console.warn('‚ö†Ô∏è  Using demo master seed. Set MASTER_SEED_PHRASE for production!');
  }
  
  console.log('üìä Wallet manager stats:', paymentWalletManager.getStats());
}
