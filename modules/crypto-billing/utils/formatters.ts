// üõ†Ô∏è Formatters and Utilities for CRYPTO_BILLING_MODULE

import { CryptoCurrency, CryptoRate } from '../types/crypto-billing.types';
import { getDecimalPlaces, isStablecoin, CRYPTO_ICONS, CRYPTO_COLORS, NUMBER_FORMAT } from './constants';

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å—É–º–º
 */
export function formatCryptoAmount(amount: string | number, currency: CryptoCurrency): string {
  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
  const decimals = getDecimalPlaces(currency);
  const icon = CRYPTO_ICONS[currency];
  
  if (isNaN(numAmount)) return `0 ${currency}`;
  
  return `${numAmount.toFixed(decimals)} ${currency}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
 */
export function formatFiatAmount(amount: number, currency: 'USD' | 'EUR' = 'EUR'): string {
  const formatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency,
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
  
  return formatter.format(amount);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatWalletAddress(address: string, startChars: number = 6, endChars: number = 4): string {
  if (address.length <= startChars + endChars) {
    return address;
  }
  
  return `${address.slice(0, startChars)}...${address.slice(-endChars)}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
 */
export function formatTimeRemaining(expiresAt: Date): string {
  const now = new Date();
  const timeLeft = expiresAt.getTime() - now.getTime();
  
  if (timeLeft <= 0) return '–ò—Å—Ç–µ–∫–ª–æ';
  
  const minutes = Math.floor(timeLeft / (1000 * 60));
  const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
  
  if (minutes > 0) {
    return `${minutes}–º ${seconds}—Å`;
  }
  
  return `${seconds}—Å`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export function formatTransactionHash(hash: string, chars: number = 8): string {
  if (!hash) return 'N/A';
  return `${hash.slice(0, chars)}...${hash.slice(-chars)}`;
}

/**
 * –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –ø–æ –∫—É—Ä—Å—É
 */
export function calculateCryptoAmount(fiatAmount: number, rate: CryptoRate): string {
  if (!rate || rate.priceEUR <= 0) return '0';
  
  const cryptoAmount = fiatAmount / rate.priceEUR;
  const decimals = getDecimalPlaces(rate.currency);
  
  return cryptoAmount.toFixed(decimals);
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
 */
export function validateCryptoAddress(address: string, currency: CryptoCurrency): boolean {
  if (!address) return false;
  
  switch (currency) {
    case 'BTC':
      // Bitcoin –∞–¥—Ä–µ—Å: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, 3 –∏–ª–∏ bc1
      return /^(1|3|bc1)[a-zA-HJ-NP-Z0-9]{25,62}$/.test(address);
    
    case 'ETH':
    case 'USDT':
    case 'USDC':
    case 'MATIC':
      // Ethereum –∞–¥—Ä–µ—Å: 42 —Å–∏–º–≤–æ–ª–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x
      return /^0x[a-fA-F0-9]{40}$/.test(address);
    
    case 'BUSD':
      // BSC –∞–¥—Ä–µ—Å (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Ethereum)
      return /^0x[a-fA-F0-9]{40}$/.test(address);
    
    default:
      return false;
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
 */
export function validatePrivateKey(privateKey: string): boolean {
  if (!privateKey) return false;
  
  // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (64 hex —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç)
  return /^[a-fA-F0-9]{64}$/.test(privateKey.replace(/^0x/, ''));
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
 */
export function generatePaymentId(): string {
  const timestamp = Date.now().toString(36);
  const randomStr = Math.random().toString(36).substring(2, 15);
  return `pay_${timestamp}_${randomStr}`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è seed –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ (–ù–ï –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!)
 */
export function generateDemoSeed(): string {
  const words = [
    'abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract',
    'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid'
  ];
  
  return Array.from({ length: 12 }, () => 
    words[Math.floor(Math.random() * words.length)]
  ).join(' ');
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É–º–º–∞ –ø—ã–ª—å—é (dust)
 */
export function isDustAmount(amount: string, currency: CryptoCurrency): boolean {
  const numAmount = parseFloat(amount);
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç
  const dustLimits = {
    BTC: 0.00001,   // 1000 —Å–∞—Ç–æ—à–∏
    ETH: 0.001,     // 0.001 ETH
    USDT: 0.01,     // 1 —Ü–µ–Ω—Ç
    USDC: 0.01,     // 1 —Ü–µ–Ω—Ç
    BUSD: 0.01,     // 1 —Ü–µ–Ω—Ç
    MATIC: 0.1      // 0.1 MATIC
  };
  
  return numAmount < (dustLimits[currency] || 0.01);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∑–∞ 24 —á–∞—Å–∞
 */
export function formatPriceChange(change24h: number): string {
  const sign = change24h >= 0 ? '+' : '';
  return `${sign}${change24h.toFixed(2)}%`;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
 */
export function getPriceChangeClass(change24h: number): string {
  if (change24h > 0) return 'text-green-500';
  if (change24h < 0) return 'text-red-500';
  return 'text-gray-500';
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–∞ –¥–ª—è QR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
 */
export function generateQRData(address: string, amount: string, currency: CryptoCurrency): string {
  switch (currency) {
    case 'BTC':
      return `bitcoin:${address}?amount=${amount}`;
    
    case 'ETH':
      return `ethereum:${address}?value=${parseFloat(amount) * 1e18}`;
    
    case 'USDT':
    case 'USDC':
      // ERC-20 —Ç–æ–∫–µ–Ω—ã
      return `ethereum:${address}?value=${amount}`;
    
    case 'BUSD':
      // BSC —Ç–æ–∫–µ–Ω
      return `https://link.trustwallet.com/send?coin=20000714&address=${address}&amount=${amount}`;
    
    case 'MATIC':
      return `ethereum:${address}?value=${parseFloat(amount) * 1e18}`;
    
    default:
      return address;
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
export function timeAgo(date: Date): string {
  const now = new Date();
  const secondsAgo = Math.floor((now.getTime() - date.getTime()) / 1000);
  
  if (secondsAgo < 60) return `${secondsAgo} —Å–µ–∫. –Ω–∞–∑–∞–¥`;
  
  const minutesAgo = Math.floor(secondsAgo / 60);
  if (minutesAgo < 60) return `${minutesAgo} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
  
  const hoursAgo = Math.floor(minutesAgo / 60);
  if (hoursAgo < 24) return `${hoursAgo} —á. –Ω–∞–∑–∞–¥`;
  
  const daysAgo = Math.floor(hoursAgo / 24);
  return `${daysAgo} –¥–Ω. –Ω–∞–∑–∞–¥`;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω —ç–∫—Å–ø–ª–æ—Ä–µ—Ä–∞ URL –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export function getExplorerUrl(txHash: string, currency: CryptoCurrency): string {
  const baseUrls = {
    BTC: 'https://blockchair.com/bitcoin/transaction/',
    ETH: 'https://etherscan.io/tx/',
    USDT: 'https://etherscan.io/tx/',
    USDC: 'https://etherscan.io/tx/',
    BUSD: 'https://bscscan.com/tx/',
    MATIC: 'https://polygonscan.com/tx/'
  };
  
  return `${baseUrls[currency] || baseUrls.ETH}${txHash}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function formatPaymentStatus(status: string): { text: string; color: string; icon: string } {
  switch (status) {
    case 'pending':
      return { text: '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã', color: 'text-yellow-500', icon: '‚è≥' };
    case 'confirming':
      return { text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', color: 'text-blue-500', icon: 'üîÑ' };
    case 'confirmed':
      return { text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', color: 'text-green-500', icon: '‚úÖ' };
    case 'completed':
      return { text: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', color: 'text-green-600', icon: 'üéâ' };
    case 'expired':
      return { text: '–ò—Å—Ç–µ–∫–ª–æ', color: 'text-red-500', icon: '‚è∞' };
    case 'failed':
      return { text: '–û—à–∏–±–∫–∞', color: 'text-red-600', icon: '‚ùå' };
    default:
      return { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', color: 'text-gray-500', icon: '‚ùì' };
  }
}

/**
 * –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª (1000 -> 1K)
 */
export function abbreviateNumber(num: number): string {
  if (num >= 1e9) return (num / 1e9).toFixed(1) + 'B';
  if (num >= 1e6) return (num / 1e6).toFixed(1) + 'M';  
  if (num >= 1e3) return (num / 1e3).toFixed(1) + 'K';
  return num.toString();
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–∞
 */
export function safeParseFloat(value: string | number, defaultValue: number = 0): number {
  if (typeof value === 'number') return isNaN(value) ? defaultValue : value;
  
  const parsed = parseFloat(value);
  return isNaN(parsed) ? defaultValue : parsed;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export function isValidEmail(email: string): boolean {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ hex —Ü–≤–µ—Ç–∞
 */
export function randomHexColor(): string {
  return '#' + Math.floor(Math.random() * 16777215).toString(16);
}

/**
 * Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ API –≤—ã–∑–æ–≤–æ–≤
 */
export function debounce<T extends (...args: any[]) => void>(
  func: T, 
  delay: number
): (...args: Parameters<T>) => void {
  let timeoutId: NodeJS.Timeout;
  
  return (...args: Parameters<T>) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
}

/**
 * Throttle —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
 */
export function throttle<T extends (...args: any[]) => void>(
  func: T, 
  delay: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean;
  
  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, delay);
    }
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
 */
export function isMobileDevice(): boolean {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 */
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    if (navigator.clipboard) {
      await navigator.clipboard.writeText(text);
      return true;
    } else {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      const success = document.execCommand('copy');
      document.body.removeChild(textArea);
      return success;
    }
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function getBrowserInfo(): { name: string; version: string; os: string } {
  const userAgent = navigator.userAgent;
  
  let browserName = 'Unknown';
  let browserVersion = '0';
  let os = 'Unknown';
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
  if (userAgent.includes('Firefox')) {
    browserName = 'Firefox';
    browserVersion = userAgent.match(/Firefox\/(\d+)/)?.[1] || '0';
  } else if (userAgent.includes('Chrome')) {
    browserName = 'Chrome';
    browserVersion = userAgent.match(/Chrome\/(\d+)/)?.[1] || '0';
  } else if (userAgent.includes('Safari')) {
    browserName = 'Safari';
    browserVersion = userAgent.match(/Safari\/(\d+)/)?.[1] || '0';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
  if (userAgent.includes('Windows')) os = 'Windows';
  else if (userAgent.includes('Mac')) os = 'macOS';
  else if (userAgent.includes('Linux')) os = 'Linux';
  else if (userAgent.includes('Android')) os = 'Android';
  else if (userAgent.includes('iOS')) os = 'iOS';
  
  return { name: browserName, version: browserVersion, os };
}
