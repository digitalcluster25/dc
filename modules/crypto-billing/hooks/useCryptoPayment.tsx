// üé£ Crypto Payment Hook - CRYPTO_BILLING_MODULE

'use client';

import { useState, useEffect, useCallback } from 'react';
import { 
  CryptoPayment, 
  CreatePaymentRequest, 
  ServiceType,
  CryptoCurrency,
  PaymentStatus 
} from '../types/crypto-billing.types';
import { useAuth } from '../../auth/hooks/useAuth';

export interface UseCryptoPaymentResult {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  currentPayment: CryptoPayment | null;
  userPayments: CryptoPayment[];
  loading: boolean;
  error: string | null;

  // –ú–µ—Ç–æ–¥—ã
  createPayment: (serviceType: ServiceType, currency: CryptoCurrency) => Promise<CryptoPayment | null>;
  checkPaymentStatus: (paymentId: string) => Promise<CryptoPayment | null>;
  confirmPayment: (paymentId: string, txHash: string) => Promise<boolean>;
  getUserPayments: () => Promise<CryptoPayment[]>;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  refreshCurrentPayment: () => Promise<void>;
  clearError: () => void;
}

/**
 * Hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏
 */
export function useCryptoPayment(): UseCryptoPaymentResult {
  const { user } = useAuth();
  
  const [currentPayment, setCurrentPayment] = useState<CryptoPayment | null>(null);
  const [userPayments, setUserPayments] = useState<CryptoPayment[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
  useEffect(() => {
    if (user) {
      getUserPayments();
    }
  }, [user]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  useEffect(() => {
    if (!currentPayment) return;

    const shouldAutoUpdate = ['pending', 'confirming'].includes(currentPayment.status);
    if (!shouldAutoUpdate) return;

    const interval = setInterval(() => {
      refreshCurrentPayment();
    }, 15000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [currentPayment]);

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
   */
  const createPayment = useCallback(async (
    serviceType: ServiceType, 
    currency: CryptoCurrency
  ): Promise<CryptoPayment | null> => {
    setLoading(true);
    setError(null);

    try {
      const token = localStorage.getItem('access_token');
      if (!token) {
        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      const response = await fetch('/api/crypto/create-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          serviceType,
          cryptoCurrency: currency
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }

      if (data.success && data.payment) {
        setCurrentPayment(data.payment);
        await getUserPayments(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π
        return data.payment;
      } else {
        throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞';
      setError(errorMessage);
      console.error('Payment creation error:', err);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
   */
  const checkPaymentStatus = useCallback(async (paymentId: string): Promise<CryptoPayment | null> => {
    try {
      const response = await fetch(`/api/crypto/check-payment?paymentId=${paymentId}`);
      const data = await response.json();

      if (data.success && data.payment) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞—Ç–µ–∂ –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω
        if (currentPayment?.id === paymentId) {
          setCurrentPayment(data.payment);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUserPayments(prev => 
          prev.map(p => p.id === paymentId ? data.payment : p)
        );

        return data.payment;
      } else {
        throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (err) {
      console.error('Payment status check error:', err);
      return null;
    }
  }, [currentPayment]);

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —Ö–µ—à–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  const confirmPayment = useCallback(async (
    paymentId: string, 
    txHash: string
  ): Promise<boolean> => {
    setLoading(true);
    setError(null);

    try {
      const token = localStorage.getItem('access_token');
      if (!token) {
        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      const response = await fetch('/api/crypto/confirm-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          paymentId,
          transactionHash: txHash
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }

      if (data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        await checkPaymentStatus(paymentId);
        return true;
      } else {
        throw new Error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂');
      }

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞';
      setError(errorMessage);
      console.error('Payment confirmation error:', err);
      return false;
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const getUserPayments = useCallback(async (): Promise<CryptoPayment[]> => {
    if (!user) return [];

    try {
      const token = localStorage.getItem('access_token');
      if (!token) return [];

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π API endpoint
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
      const mockPayments: CryptoPayment[] = [];
      setUserPayments(mockPayments);
      return mockPayments;

    } catch (err) {
      console.error('Get user payments error:', err);
      return [];
    }
  }, [user]);

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
   */
  const refreshCurrentPayment = useCallback(async (): Promise<void> => {
    if (!currentPayment) return;

    const updatedPayment = await checkPaymentStatus(currentPayment.id);
    if (updatedPayment) {
      setCurrentPayment(updatedPayment);
    }
  }, [currentPayment, checkPaymentStatus]);

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
   */
  const clearError = useCallback(() => {
    setError(null);
  }, []);

  return {
    currentPayment,
    userPayments,
    loading,
    error,
    createPayment,
    checkPaymentStatus,
    confirmPayment,
    getUserPayments,
    refreshCurrentPayment,
    clearError
  };
}

/**
 * Hook –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
export function usePaymentStatus(paymentId: string | null) {
  const [payment, setPayment] = useState<CryptoPayment | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const checkStatus = useCallback(async () => {
    if (!paymentId) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/crypto/check-payment?paymentId=${paymentId}`);
      const data = await response.json();

      if (data.success && data.payment) {
        setPayment(data.payment);
      } else {
        setError('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞');
      console.error('Payment status error:', err);
    } finally {
      setLoading(false);
    }
  }, [paymentId]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ paymentId
  useEffect(() => {
    checkStatus();
  }, [checkStatus]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  useEffect(() => {
    if (!payment || !['pending', 'confirming'].includes(payment.status)) {
      return;
    }

    const interval = setInterval(() => {
      checkStatus();
    }, 10000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [payment, checkStatus]);

  return {
    payment,
    loading,
    error,
    refresh: checkStatus
  };
}

/**
 * Hook –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function usePaymentStats() {
  const { userPayments } = useCryptoPayment();

  const stats = {
    total: userPayments.length,
    completed: userPayments.filter(p => p.status === 'completed').length,
    pending: userPayments.filter(p => ['pending', 'confirming'].includes(p.status)).length,
    failed: userPayments.filter(p => ['failed', 'expired'].includes(p.status)).length,
    totalSpentEUR: userPayments
      .filter(p => p.status === 'completed')
      .reduce((sum, p) => sum + p.priceEUR, 0)
  };

  const recentPayments = userPayments
    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
    .slice(0, 5);

  const popularServices = userPayments
    .filter(p => p.status === 'completed')
    .reduce((acc, payment) => {
      acc[payment.serviceType] = (acc[payment.serviceType] || 0) + 1;
      return acc;
    }, {} as Record<ServiceType, number>);

  const popularCurrencies = userPayments
    .reduce((acc, payment) => {
      acc[payment.cryptoCurrency] = (acc[payment.cryptoCurrency] || 0) + 1;
      return acc;
    }, {} as Record<CryptoCurrency, number>);

  return {
    stats,
    recentPayments,
    popularServices,
    popularCurrencies
  };
}

/**
 * Hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ–ø–ª–∞—Ç—ã (–ø–æ—à–∞–≥–æ–≤—ã–π)
 */
export function usePaymentFlow() {
  const [step, setStep] = useState<'service' | 'currency' | 'payment' | 'status' | 'complete'>('service');
  const [selectedService, setSelectedService] = useState<ServiceType | null>(null);
  const [selectedCurrency, setSelectedCurrency] = useState<CryptoCurrency>('USDT');
  const [currentPayment, setCurrentPayment] = useState<CryptoPayment | null>(null);

  const { createPayment, loading, error } = useCryptoPayment();

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
   */
  const nextStep = useCallback(() => {
    switch (step) {
      case 'service':
        if (selectedService) setStep('currency');
        break;
      case 'currency':
        setStep('payment');
        break;
      case 'payment':
        setStep('status');
        break;
      case 'status':
        setStep('complete');
        break;
    }
  }, [step, selectedService]);

  /**
   * –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
   */
  const prevStep = useCallback(() => {
    switch (step) {
      case 'currency':
        setStep('service');
        break;
      case 'payment':
        setStep('currency');
        break;
      case 'status':
        setStep('payment');
        break;
      case 'complete':
        setStep('status');
        break;
    }
  }, [step]);

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞—Ç—É—Å—É
   */
  const processPayment = useCallback(async () => {
    if (!selectedService) return false;

    const payment = await createPayment(selectedService, selectedCurrency);
    if (payment) {
      setCurrentPayment(payment);
      setStep('status');
      return true;
    }
    return false;
  }, [selectedService, selectedCurrency, createPayment]);

  /**
   * –°–±—Ä–æ—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  const reset = useCallback(() => {
    setStep('service');
    setSelectedService(null);
    setSelectedCurrency('USDT');
    setCurrentPayment(null);
  }, []);

  return {
    step,
    selectedService,
    selectedCurrency,
    currentPayment,
    loading,
    error,
    setSelectedService,
    setSelectedCurrency,
    nextStep,
    prevStep,
    processPayment,
    reset
  };
}
