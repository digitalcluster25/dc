// üëõ Crypto Wallet Component - CRYPTO_BILLING_MODULE

'use client';

import { useState, useEffect } from 'react';
import { CryptoPayment, CryptoCurrency } from '../types/crypto-billing.types';
import { 
  formatWalletAddress, 
  formatCryptoAmount, 
  copyToClipboard,
  getCryptoIcon,
  getCryptoColor 
} from '../utils/formatters';

interface CryptoWalletProps {
  payment: CryptoPayment;
  showQRCode?: boolean;
  showInstructions?: boolean;
  className?: string;
}

export default function CryptoWallet({
  payment,
  showQRCode = true,
  showInstructions = true,
  className = ''
}: CryptoWalletProps) {
  const [copied, setCopied] = useState<string | null>(null);
  const [qrCodeUrl, setQRCodeUrl] = useState<string | null>(null);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ URL
  useEffect(() => {
    if (showQRCode) {
      generateQRCodeUrl();
    }
  }, [payment, showQRCode]);

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è QR-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
   */
  const generateQRCodeUrl = () => {
    const qrData = encodeURIComponent(getPaymentURI(payment));
    const size = '256x256';
    const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}&data=${qrData}`;
    setQRCodeUrl(qrUrl);
  };

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   */
  const handleCopy = async (text: string, type: string) => {
    const success = await copyToClipboard(text);
    if (success) {
      setCopied(type);
      setTimeout(() => setCopied(null), 2000);
    }
  };

  /**
   * –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—à–µ–ª—å–∫–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
   */
  const openWallet = () => {
    const uri = getPaymentURI(payment);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å URI –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
    if (typeof window !== 'undefined') {
      window.location.href = uri;
    }
  };

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Header */}
      <div className="text-center">
        <h3 className="text-xl font-bold text-white mb-2">
          üí∞ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        </h3>
        <p className="text-gray-300">
          –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* QR Code Section */}
        {showQRCode && (
          <div className="text-center">
            <div className="glass-card p-6">
              <h4 className="font-semibold text-white mb-4">
                üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥
              </h4>
              
              {qrCodeUrl ? (
                <div className="inline-block p-4 bg-white rounded-lg mb-4">
                  <img 
                    src={qrCodeUrl} 
                    alt="Payment QR Code"
                    className="w-48 h-48 mx-auto"
                    onError={() => setQRCodeUrl(null)}
                  />
                </div>
              ) : (
                <div className="w-48 h-48 mx-auto mb-4 bg-white rounded-lg flex flex-col items-center justify-center">
                  <div className="text-6xl mb-2" style={{ color: getCryptoColor(payment.cryptoCurrency) }}>
                    {getCryptoIcon(payment.cryptoCurrency)}
                  </div>
                  <div className="text-black font-bold">{payment.cryptoCurrency}</div>
                  <div className="text-black text-sm">–ü–ª–∞—Ç–µ–∂</div>
                </div>
              )}
              
              <button
                onClick={openWallet}
                className="w-full px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
              >
                üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–æ—à–µ–ª—å–∫–µ
              </button>
              
              <p className="text-xs text-gray-400 mt-3">
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π QR-–∫–æ–¥–æ–≤
              </p>
            </div>
          </div>
        )}

        {/* Payment Details */}
        <div className="space-y-4">
          {/* Amount */}
          <div className="glass-card p-4">
            <label className="text-sm font-medium text-gray-300 mb-2 block">
              –¢–æ—á–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:
            </label>
            <div className="flex items-center justify-between bg-gradient-to-r from-blue-500/10 to-purple-500/10 p-4 rounded-lg border border-blue-500/30">
              <div className="flex items-center">
                <div className="text-3xl mr-3" style={{ color: getCryptoColor(payment.cryptoCurrency) }}>
                  {getCryptoIcon(payment.cryptoCurrency)}
                </div>
                <div>
                  <div className="text-2xl font-bold text-blue-400">
                    {formatCryptoAmount(payment.cryptoAmount, payment.cryptoCurrency)}
                  </div>
                  <div className="text-sm text-gray-300">
                    ‚âà ‚Ç¨{payment.priceEUR} –ø–æ –∫—É—Ä—Å—É ‚Ç¨{payment.exchangeRate.toFixed(4)}
                  </div>
                </div>
              </div>
              
              <button
                onClick={() => handleCopy(payment.cryptoAmount, 'amount')}
                className="px-3 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-colors"
                title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É"
              >
                {copied === 'amount' ? '‚úÖ' : 'üìã'}
              </button>
            </div>
          </div>

          {/* Address */}
          <div className="glass-card p-4">
            <label className="text-sm font-medium text-gray-300 mb-2 block">
              –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ ({payment.cryptoCurrency}):
            </label>
            
            {/* Full address display */}
            <div className="bg-white/5 p-3 rounded-lg mb-3">
              <div className="font-mono text-sm text-white break-all">
                {payment.paymentAddress}
              </div>
            </div>
            
            {/* Action buttons */}
            <div className="flex space-x-2">
              <button
                onClick={() => handleCopy(payment.paymentAddress, 'address')}
                className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
              >
                {copied === 'address' ? '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ' : 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å'}
              </button>
              
              <button
                onClick={() => {
                  const explorerUrl = getExplorerUrl(payment.paymentAddress, payment.cryptoCurrency);
                  window.open(explorerUrl, '_blank');
                }}
                className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-medium transition-colors"
                title="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω —ç–∫—Å–ø–ª–æ—Ä–µ—Ä–µ"
              >
                üîó
              </button>
            </div>
          </div>

          {/* Network Info */}
          <div className="glass-card p-4">
            <label className="text-sm font-medium text-gray-300 mb-2 block">
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏:
            </label>
            
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-gray-300">–ë–ª–æ–∫—á–µ–π–Ω:</span>
                <span className="text-white font-medium capitalize">
                  {payment.network}
                </span>
              </div>
              
              <div className="flex justify-between items-center">
                <span className="text-gray-300">–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π:</span>
                <span className="text-white font-medium">
                  {payment.requiredConfirmations}
                </span>
              </div>
              
              <div className="flex justify-between items-center">
                <span className="text-gray-300">–¢–µ–∫—É—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</span>
                <span className="text-blue-400 font-medium">
                  {payment.confirmations} / {payment.requiredConfirmations}
                </span>
              </div>
              
              {payment.confirmations > 0 && (
                <div className="w-full bg-gray-600 rounded-full h-2 mt-2">
                  <div
                    className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                    style={{
                      width: `${Math.min((payment.confirmations / payment.requiredConfirmations) * 100, 100)}%`
                    }}
                  ></div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Instructions */}
      {showInstructions && (
        <div className="glass-card p-6">
          <h4 className="font-semibold text-white mb-4">
            üìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
          </h4>
          
          <div className="space-y-4">
            <div className="flex items-start">
              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4 flex-shrink-0">
                1
              </div>
              <div>
                <div className="font-medium text-white mb-1">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</div>
                <div className="text-sm text-gray-300">
                  –ù–∞–∂–º–∏—Ç–µ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å" –≤—ã—à–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥
                </div>
              </div>
            </div>
            
            <div className="flex items-start">
              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4 flex-shrink-0">
                2
              </div>
              <div>
                <div className="font-medium text-white mb-1">–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫</div>
                <div className="text-sm text-gray-300">
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-–∫–æ—à–µ–ª–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π {payment.cryptoCurrency}
                </div>
              </div>
            </div>
            
            <div className="flex items-start">
              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4 flex-shrink-0">
                3
              </div>
              <div>
                <div className="font-medium text-white mb-1">–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É</div>
                <div className="text-sm text-gray-300">
                  <strong>{formatCryptoAmount(payment.cryptoAmount, payment.cryptoCurrency)}</strong> 
                  {' '}–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Å—É–º–º—É!
                </div>
              </div>
            </div>
            
            <div className="flex items-start">
              <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4 flex-shrink-0">
                4
              </div>
              <div>
                <div className="font-medium text-white mb-1">–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</div>
                <div className="text-sm text-gray-300">
                  –ü–æ—Å–ª–µ {payment.requiredConfirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –≤–∞—à —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                </div>
              </div>
            </div>
          </div>

          {/* Warnings */}
          <div className="mt-6 space-y-3">
            <div className="bg-red-500/20 border border-red-500/50 rounded-lg p-4">
              <div className="flex items-start">
                <span className="text-red-400 text-xl mr-3">‚ö†Ô∏è</span>
                <div>
                  <div className="font-medium text-red-300 mb-1">–í–∞–∂–Ω–æ:</div>
                  <div className="text-sm text-red-200">
                    –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ <strong>{payment.cryptoCurrency}</strong> –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å. 
                    –û—Ç–ø—Ä–∞–≤–∫–∞ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ —Å—Ä–µ–¥—Å—Ç–≤!
                  </div>
                </div>
              </div>
            </div>
            
            <div className="bg-yellow-500/20 border border-yellow-500/50 rounded-lg p-4">
              <div className="flex items-start">
                <span className="text-yellow-400 text-xl mr-3">üí°</span>
                <div>
                  <div className="font-medium text-yellow-300 mb-1">–°–æ–≤–µ—Ç:</div>
                  <div className="text-sm text-yellow-200">
                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ. 
                    –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ –±—ã—Å—Ç—Ä—ã—Ö —Å–µ—Ç—è—Ö.
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

/**
 * –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
 */
interface CryptoWalletCompactProps {
  payment: CryptoPayment;
  className?: string;
}

export function CryptoWalletCompact({ payment, className = '' }: CryptoWalletCompactProps) {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    const success = await copyToClipboard(payment.paymentAddress);
    if (success) {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  return (
    <div className={`glass-card p-4 ${className}`}>
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center">
          <div className="text-2xl mr-3" style={{ color: getCryptoColor(payment.cryptoCurrency) }}>
            {getCryptoIcon(payment.cryptoCurrency)}
          </div>
          <div>
            <div className="font-bold text-blue-400">
              {formatCryptoAmount(payment.cryptoAmount, payment.cryptoCurrency)}
            </div>
            <div className="text-sm text-gray-300">‚âà ‚Ç¨{payment.priceEUR}</div>
          </div>
        </div>
        
        <button
          onClick={handleCopy}
          className="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm transition-colors"
        >
          {copied ? '‚úÖ' : 'üìã'}
        </button>
      </div>
      
      <div className="text-xs text-gray-400 font-mono break-all">
        {formatWalletAddress(payment.paymentAddress, 12, 12)}
      </div>
    </div>
  );
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */

// –ü–æ–ª—É—á–µ–Ω–∏–µ URI –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –∫–æ—à–µ–ª—å–∫–µ
function getPaymentURI(payment: CryptoPayment): string {
  const { cryptoCurrency, paymentAddress, cryptoAmount } = payment;
  
  switch (cryptoCurrency) {
    case 'BTC':
      return `bitcoin:${paymentAddress}?amount=${cryptoAmount}`;
    
    case 'ETH':
      return `ethereum:${paymentAddress}?value=${parseFloat(cryptoAmount) * 1e18}`;
    
    case 'USDT':
    case 'USDC':
      // ERC-20 tokens
      return `ethereum:${paymentAddress}?value=${cryptoAmount}`;
    
    case 'BUSD':
      // BSC token
      return `https://link.trustwallet.com/send?coin=20000714&address=${paymentAddress}&amount=${cryptoAmount}`;
    
    case 'MATIC':
      return `ethereum:${paymentAddress}?value=${parseFloat(cryptoAmount) * 1e18}&chainId=137`;
    
    default:
      return paymentAddress;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–ª–æ–∫—á–µ–π–Ω —ç–∫—Å–ø–ª–æ—Ä–µ—Ä–∞
function getExplorerUrl(address: string, currency: CryptoCurrency): string {
  const baseUrls = {
    BTC: 'https://blockchair.com/bitcoin/address/',
    ETH: 'https://etherscan.io/address/',
    USDT: 'https://etherscan.io/address/',
    USDC: 'https://etherscan.io/address/',
    BUSD: 'https://bscscan.com/address/',
    MATIC: 'https://polygonscan.com/address/'
  };
  
  return `${baseUrls[currency] || baseUrls.ETH}${address}`;
}
