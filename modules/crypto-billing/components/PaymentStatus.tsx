// üìä Payment Status Component - CRYPTO_BILLING_MODULE

'use client';

import { useState, useEffect } from 'react';
import { 
  CryptoPayment, 
  PaymentStatus as PaymentStatusType,
  SERVICE_CATALOG
} from '../types/crypto-billing.types';
import { 
  formatPaymentStatus, 
  formatTimeRemaining, 
  formatCryptoAmount,
  formatWalletAddress,
  getExplorerUrl,
  timeAgo
} from '../utils/formatters';

interface PaymentStatusProps {
  paymentId: string;
  onStatusChange?: (status: PaymentStatusType) => void;
  autoRefresh?: boolean;
  className?: string;
}

export default function PaymentStatus({
  paymentId,
  onStatusChange,
  autoRefresh = true,
  className = ''
}: PaymentStatusProps) {
  const [payment, setPayment] = useState<CryptoPayment | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [timeRemaining, setTimeRemaining] = useState('');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
  useEffect(() => {
    loadPaymentStatus();
  }, [paymentId]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  useEffect(() => {
    if (!autoRefresh) return;

    const interval = setInterval(() => {
      if (payment && ['pending', 'confirming'].includes(payment.status)) {
        loadPaymentStatus();
      }
    }, 10000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, [payment, autoRefresh]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    if (payment?.expiresAt) {
      const interval = setInterval(() => {
        const remaining = formatTimeRemaining(payment.expiresAt);
        setTimeRemaining(remaining);
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [payment]);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
   */
  const loadPaymentStatus = async () => {
    try {
      setError('');
      
      const response = await fetch(`/api/crypto/check-payment?paymentId=${paymentId}`);
      const data = await response.json();

      if (data.success && data.payment) {
        setPayment(data.payment);
        onStatusChange?.(data.payment.status);
      } else {
        setError('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error('Failed to load payment status:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className={`glass-card p-8 text-center ${className}`}>
        <div className="w-12 h-12 border-4 border-white/30 border-t-white rounded-full animate-spin mx-auto mb-4"></div>
        <p className="text-white">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`glass-card p-8 text-center ${className}`}>
        <div className="text-red-400 text-xl mb-4">‚ùå</div>
        <p className="text-red-300 mb-4">{error}</p>
        <button
          onClick={() => {
            setLoading(true);
            loadPaymentStatus();
          }}
          className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded transition-colors"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  if (!payment) {
    return (
      <div className={`glass-card p-8 text-center ${className}`}>
        <p className="text-gray-300">–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
      </div>
    );
  }

  const statusInfo = formatPaymentStatus(payment.status);
  const serviceInfo = SERVICE_CATALOG.find(s => s.type === payment.serviceType);

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Header with Status */}
      <div className="glass-card p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold text-white">
            –ü–ª–∞—Ç–µ–∂ #{payment.id.slice(-8)}
          </h2>
          <div className={`flex items-center ${statusInfo.color} font-semibold`}>
            <span className="text-xl mr-2">{statusInfo.icon}</span>
            {statusInfo.text}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="text-sm text-gray-300">–°–µ—Ä–≤–∏—Å:</label>
            <div className="text-white font-medium">
              {serviceInfo?.icon} {serviceInfo?.name}
            </div>
          </div>
          <div>
            <label className="text-sm text-gray-300">–°—É–º–º–∞:</label>
            <div className="text-white font-medium">
              {formatCryptoAmount(payment.cryptoAmount, payment.cryptoCurrency)}
            </div>
          </div>
          <div>
            <label className="text-sm text-gray-300">–°–æ–∑–¥–∞–Ω:</label>
            <div className="text-white font-medium">
              {timeAgo(payment.createdAt)}
            </div>
          </div>
        </div>
      </div>

      {/* Status-specific Content */}
      {payment.status === 'pending' && (
        <div className="glass-card p-6">
          <div className="text-center mb-6">
            <div className="text-4xl mb-4">‚è≥</div>
            <h3 className="text-xl font-bold text-white mb-2">
              –û–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            </h3>
            <p className="text-gray-300">
              –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            </p>
            {timeRemaining && timeRemaining !== '–ò—Å—Ç–µ–∫–ª–æ' && (
              <div className="mt-3 text-yellow-400 font-medium">
                ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {timeRemaining}
              </div>
            )}
          </div>

          <div className="space-y-4">
            <div>
              <label className="text-sm text-gray-300">–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</label>
              <div className="flex items-center justify-between bg-white/5 p-3 rounded mt-1">
                <span className="font-mono text-white">
                  {formatWalletAddress(payment.paymentAddress)}
                </span>
                <button
                  onClick={() => navigator.clipboard.writeText(payment.paymentAddress)}
                  className="text-blue-400 hover:text-blue-300 transition-colors"
                >
                  üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </button>
              </div>
            </div>

            <div>
              <label className="text-sm text-gray-300">–¢–æ—á–Ω–∞—è —Å—É–º–º–∞:</label>
              <div className="bg-white/5 p-3 rounded mt-1">
                <span className="text-xl font-bold text-blue-400">
                  {formatCryptoAmount(payment.cryptoAmount, payment.cryptoCurrency)}
                </span>
              </div>
            </div>
          </div>
        </div>
      )}

      {payment.status === 'confirming' && (
        <div className="glass-card p-6">
          <div className="text-center mb-6">
            <div className="text-4xl mb-4">üîÑ</div>
            <h3 className="text-xl font-bold text-white mb-2">
              –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
            </h3>
            <p className="text-gray-300">
              –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            </p>
          </div>

          <div className="space-y-4">
            {payment.transactionHash && (
              <div>
                <label className="text-sm text-gray-300">–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</label>
                <div className="flex items-center justify-between bg-white/5 p-3 rounded mt-1">
                  <span className="font-mono text-white">
                    {formatWalletAddress(payment.transactionHash)}
                  </span>
                  <a
                    href={getExplorerUrl(payment.transactionHash, payment.cryptoCurrency)}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-400 hover:text-blue-300 transition-colors"
                  >
                    üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                  </a>
                </div>
              </div>
            )}

            <div>
              <label className="text-sm text-gray-300">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</label>
              <div className="bg-white/5 p-3 rounded mt-1">
                <div className="flex items-center justify-between">
                  <span className="text-white">
                    {payment.confirmations} / {payment.requiredConfirmations}
                  </span>
                  <div className="flex-1 ml-4">
                    <div className="w-full bg-gray-600 rounded-full h-2">
                      <div
                        className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                        style={{
                          width: `${Math.min((payment.confirmations / payment.requiredConfirmations) * 100, 100)}%`
                        }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {payment.status === 'confirmed' && (
        <div className="glass-card p-6">
          <div className="text-center mb-6">
            <div className="text-4xl mb-4">‚úÖ</div>
            <h3 className="text-xl font-bold text-white mb-2">
              –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
            </h3>
            <p className="text-gray-300">
              –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∞—à —Å–µ—Ä–≤–∏—Å...
            </p>
          </div>

          <div className="bg-green-500/20 border border-green-500/50 rounded-lg p-4">
            <div className="flex items-center">
              <div className="w-6 h-6 border-2 border-green-300 border-t-transparent rounded-full animate-spin mr-3"></div>
              <span className="text-green-300">
                –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º {serviceInfo?.name}...
              </span>
            </div>
          </div>
        </div>
      )}

      {payment.status === 'completed' && (
        <div className="glass-card p-6">
          <div className="text-center mb-6">
            <div className="text-4xl mb-4">üéâ</div>
            <h3 className="text-xl font-bold text-white mb-2">
              –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
            </h3>
            <p className="text-gray-300">
              {serviceInfo?.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            </p>
          </div>

          <div className="bg-green-500/20 border border-green-500/50 rounded-lg p-4 mb-6">
            <div className="text-green-300 font-medium text-center">
              ‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {payment.completedAt && timeAgo(payment.completedAt)}
            </div>
          </div>

          <div className="text-center">
            <button
              onClick={() => {
                // TODO: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–µ—Ä–≤–∏—Å–æ–º
                console.log('Navigate to service management');
              }}
              className="btn-primary px-8 py-3 text-lg font-semibold"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–µ—Ä–≤–∏—Å—É üöÄ
            </button>
          </div>
        </div>
      )}

      {payment.status === 'expired' && (
        <div className="glass-card p-6">
          <div className="text-center mb-6">
            <div className="text-4xl mb-4">‚è∞</div>
            <h3 className="text-xl font-bold text-white mb-2">
              –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ
            </h3>
            <p className="text-gray-300">
              –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫
            </p>
          </div>

          <div className="text-center">
            <button
              onClick={() => {
                // TODO: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
                window.location.reload();
              }}
              className="btn-primary px-6 py-3 font-semibold"
            >
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
            </button>
          </div>
        </div>
      )}

      {payment.status === 'failed' && (
        <div className="glass-card p-6">
          <div className="text-center mb-6">
            <div className="text-4xl mb-4">‚ùå</div>
            <h3 className="text-xl font-bold text-white mb-2">
              –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
            </h3>
            <p className="text-gray-300">
              –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            </p>
          </div>

          <div className="bg-red-500/20 border border-red-500/50 rounded-lg p-4 mb-6">
            <div className="text-red-300 text-center">
              –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
            </div>
          </div>

          <div className="text-center">
            <button
              onClick={() => {
                // TODO: –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                console.log('Contact support');
              }}
              className="px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-semibold rounded transition-colors"
            >
              –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
            </button>
          </div>
        </div>
      )}

      {/* Refresh Button */}
      <div className="text-center">
        <button
          onClick={() => {
            setLoading(true);
            loadPaymentStatus();
          }}
          className="px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded transition-colors"
          disabled={loading}
        >
          {loading ? 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'}
        </button>
      </div>
    </div>
  );
}

/**
 * –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
interface PaymentStatusCompactProps {
  payment: CryptoPayment;
  className?: string;
}

export function PaymentStatusCompact({ payment, className = '' }: PaymentStatusCompactProps) {
  const statusInfo = formatPaymentStatus(payment.status);
  const serviceInfo = SERVICE_CATALOG.find(s => s.type === payment.serviceType);

  return (
    <div className={`glass-card p-4 ${className}`}>
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <span className="text-2xl mr-3">{statusInfo.icon}</span>
          <div>
            <div className="font-medium text-white">
              {serviceInfo?.name}
            </div>
            <div className="text-sm text-gray-300">
              {formatCryptoAmount(payment.cryptoAmount, payment.cryptoCurrency)}
            </div>
          </div>
        </div>
        
        <div className="text-right">
          <div className={`font-medium ${statusInfo.color}`}>
            {statusInfo.text}
          </div>
          <div className="text-xs text-gray-400">
            {timeAgo(payment.createdAt)}
          </div>
        </div>
      </div>
    </div>
  );
}