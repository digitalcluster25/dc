// üí≥ Crypto Checkout Component - CRYPTO_BILLING_MODULE

'use client';

import { useState, useEffect } from 'react';
import { 
  CryptoCurrency, 
  CryptoPayment, 
  ServiceType, 
  CryptoRate 
} from '../types/crypto-billing.types';
import { SUPPORTED_CURRENCIES, SERVICE_CATALOG } from '../utils/constants';
import { 
  formatCryptoAmount, 
  formatFiatAmount, 
  formatWalletAddress, 
  formatTimeRemaining,
  copyToClipboard 
} from '../utils/formatters';

interface CryptoCheckoutProps {
  serviceType: ServiceType;
  onPaymentCreated?: (payment: CryptoPayment) => void;
  onPaymentComplete?: (payment: CryptoPayment) => void;
  className?: string;
}

export default function CryptoCheckout({
  serviceType,
  onPaymentCreated,
  onPaymentComplete,
  className = ''
}: CryptoCheckoutProps) {
  const [selectedCurrency, setSelectedCurrency] = useState<CryptoCurrency>('USDT');
  const [cryptoRates, setCryptoRates] = useState<CryptoRate[]>([]);
  const [currentPayment, setCurrentPayment] = useState<CryptoPayment | null>(null);
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState<'select' | 'payment' | 'completed'>('select');
  const [timeRemaining, setTimeRemaining] = useState('');
  const [copied, setCopied] = useState<string | null>(null);

  const selectedService = SERVICE_CATALOG.find(s => s.type === serviceType);
  const selectedRate = cryptoRates.find(r => r.currency === selectedCurrency);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    loadCryptoRates();
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
  useEffect(() => {
    if (currentPayment && currentPayment.expiresAt) {
      const interval = setInterval(() => {
        const remaining = formatTimeRemaining(currentPayment.expiresAt);
        setTimeRemaining(remaining);
        
        if (remaining === '–ò—Å—Ç–µ–∫–ª–æ') {
          clearInterval(interval);
        }
      }, 1000);
      
      return () => clearInterval(interval);
    }
  }, [currentPayment]);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
   */
  const loadCryptoRates = async () => {
    try {
      const response = await fetch('/api/crypto/rates');
      const data = await response.json();
      
      if (data.success) {
        setCryptoRates(data.rates);
      }
    } catch (error) {
      console.error('Failed to load crypto rates:', error);
    }
  };

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  const createPayment = async () => {
    setLoading(true);
    
    try {
      const response = await fetch('/api/crypto/create-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('access_token')}`
        },
        body: JSON.stringify({
          serviceType,
          cryptoCurrency: selectedCurrency
        })
      });

      const data = await response.json();
      
      if (data.success && data.payment) {
        setCurrentPayment(data.payment);
        setStep('payment');
        onPaymentCreated?.(data.payment);
      } else {
        alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ' + data.message);
      }
    } catch (error) {
      console.error('Payment creation error:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
    } finally {
      setLoading(false);
    }
  };

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   */
  const handleCopy = async (text: string, type: string) => {
    const success = await copyToClipboard(text);
    if (success) {
      setCopied(type);
      setTimeout(() => setCopied(null), 2000);
    }
  };

  /**
   * –†–µ–Ω–¥–µ—Ä –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
   */
  const renderCurrencySelection = () => (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-white mb-4">
          –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        </h2>
        <div className="glass-card p-4 inline-block">
          <div className="text-lg text-gray-300">
            {selectedService?.name} - <span className="text-blue-400 font-bold">‚Ç¨10</span>
          </div>
        </div>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∞–ª—é—Ç—ã (Stablecoins) */}
      <div>
        <h3 className="text-lg font-semibold text-white mb-3 flex items-center">
          üíé –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)
          <span className="ml-2 text-xs bg-green-500/20 text-green-300 px-2 py-1 rounded">
            –ù–ò–ó–ö–ò–ï –ö–û–ú–ò–°–°–ò–ò
          </span>
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {SUPPORTED_CURRENCIES
            .filter(currency => currency.isStablecoin)
            .map((currency) => {
              const rate = cryptoRates.find(r => r.currency === currency.symbol);
              const cryptoAmount = rate ? (10 / rate.priceEUR).toFixed(2) : '~';
              
              return (
                <div
                  key={currency.symbol}
                  onClick={() => setSelectedCurrency(currency.symbol)}
                  className={`
                    glass-card p-4 cursor-pointer transition-all
                    ${selectedCurrency === currency.symbol 
                      ? 'ring-2 ring-blue-500 bg-blue-500/20' 
                      : 'hover:bg-white/10'
                    }
                  `}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="text-2xl mr-3">{currency.icon}</div>
                      <div>
                        <div className="font-bold text-white">{currency.symbol}</div>
                        <div className="text-sm text-gray-300">{currency.name}</div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-bold text-blue-400">
                        {cryptoAmount} {currency.symbol}
                      </div>
                      <div className="text-xs text-gray-400">
                        ‚âà‚Ç¨{rate?.priceEUR.toFixed(3) || '1.00'}
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-3 text-xs text-gray-400 flex items-center justify-between">
                    <span>‚ö° {currency.avgConfirmationTime} –º–∏–Ω</span>
                    <span className="text-green-400">–°—Ç–∞–±–∏–ª—å–Ω–∞—è</span>
                  </div>
                </div>
              );
            })}
        </div>
      </div>

      {/* –î—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã */}
      <div>
        <h3 className="text-lg font-semibold text-white mb-3">
          üåü –î—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {SUPPORTED_CURRENCIES
            .filter(currency => !currency.isStablecoin)
            .map((currency) => {
              const rate = cryptoRates.find(r => r.currency === currency.symbol);
              const cryptoAmount = rate ? (10 / rate.priceEUR).toFixed(6) : '~';
              
              return (
                <div
                  key={currency.symbol}
                  onClick={() => setSelectedCurrency(currency.symbol)}
                  className={`
                    glass-card p-4 cursor-pointer transition-all
                    ${selectedCurrency === currency.symbol 
                      ? 'ring-2 ring-blue-500 bg-blue-500/20' 
                      : 'hover:bg-white/10'
                    }
                  `}
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center">
                      <div className="text-2xl mr-3">{currency.icon}</div>
                      <div>
                        <div className="font-bold text-white">{currency.symbol}</div>
                        <div className="text-sm text-gray-300">{currency.name}</div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <div className="font-bold text-blue-400 text-sm">
                      {cryptoAmount} {currency.symbol}
                    </div>
                    <div className="text-xs text-gray-400">
                      ‚Ç¨{rate?.priceEUR.toFixed(2) || 'N/A'}
                      {rate?.change24h && (
                        <span className={`ml-1 ${rate.change24h >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                          {rate.change24h >= 0 ? '+' : ''}{rate.change24h.toFixed(1)}%
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ */}
      <div className="text-center">
        <button
          onClick={createPayment}
          disabled={loading}
          className="btn-primary px-8 py-4 text-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? (
            <div className="flex items-center">
              <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2"></div>
              –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...
            </div>
          ) : (
            `–û–ø–ª–∞—Ç–∏—Ç—å ${selectedRate ? formatCryptoAmount((10 / selectedRate.priceEUR).toString(), selectedCurrency) : '...'}`
          )}
        </button>
        
        <p className="text-sm text-gray-400 mt-2">
          –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–ø–ª–∞—Ç—ã
        </p>
      </div>
    </div>
  );

  /**
   * –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–ª–∞—Ç—ã
   */
  const renderPaymentPage = () => {
    if (!currentPayment) return null;

    return (
      <div className="space-y-6">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-white mb-2">
            –û–ø–ª–∞—Ç–∞ {selectedService?.name}
          </h2>
          <div className="text-gray-300">
            –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
          </div>
          {timeRemaining && timeRemaining !== '–ò—Å—Ç–µ–∫–ª–æ' && (
            <div className="mt-2 text-yellow-400 font-medium">
              ‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: {timeRemaining}
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* QR Code */}
          <div className="text-center">
            <div className="glass-card p-6">
              <h3 className="text-lg font-semibold text-white mb-4">
                –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥
              </h3>
              
              {/* QR Code Placeholder */}
              <div className="w-64 h-64 mx-auto mb-4 bg-white rounded-lg flex items-center justify-center">
                <div className="text-center text-black">
                  <div className="text-4xl mb-2">üì±</div>
                  <div className="text-sm">QR –∫–æ–¥ –¥–ª—è</div>
                  <div className="font-bold">{currentPayment.cryptoCurrency}</div>
                </div>
              </div>
              
              <p className="text-sm text-gray-300">
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π QR-–∫–æ–¥–æ–≤
              </p>
            </div>
          </div>

          {/* Payment Details */}
          <div className="space-y-4">
            <div className="glass-card p-6">
              <h3 className="text-lg font-semibold text-white mb-4">
                –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞
              </h3>
              
              <div className="space-y-4">
                {/* Amount */}
                <div>
                  <label className="text-sm text-gray-300">–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</label>
                  <div className="flex items-center justify-between bg-white/5 p-3 rounded mt-1">
                    <span className="text-xl font-bold text-blue-400">
                      {formatCryptoAmount(currentPayment.cryptoAmount, currentPayment.cryptoCurrency)}
                    </span>
                    <button
                      onClick={() => handleCopy(currentPayment.cryptoAmount, 'amount')}
                      className="text-gray-400 hover:text-white transition-colors"
                    >
                      {copied === 'amount' ? '‚úì' : 'üìã'}
                    </button>
                  </div>
                </div>

                {/* Address */}
                <div>
                  <label className="text-sm text-gray-300">–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</label>
                  <div className="flex items-center justify-between bg-white/5 p-3 rounded mt-1">
                    <span className="font-mono text-sm text-white">
                      {formatWalletAddress(currentPayment.paymentAddress, 8, 8)}
                    </span>
                    <button
                      onClick={() => handleCopy(currentPayment.paymentAddress, 'address')}
                      className="text-gray-400 hover:text-white transition-colors"
                    >
                      {copied === 'address' ? '‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ' : 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
                    </button>
                  </div>
                  <div className="text-xs text-gray-400 mt-1">
                    –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: {currentPayment.paymentAddress}
                  </div>
                </div>

                {/* Network */}
                <div>
                  <label className="text-sm text-gray-300">–°–µ—Ç—å:</label>
                  <div className="bg-white/5 p-3 rounded mt-1">
                    <span className="text-white font-medium">
                      {currentPayment.network.charAt(0).toUpperCase() + currentPayment.network.slice(1)}
                    </span>
                    <span className="text-gray-400 ml-2">
                      (–º–∏–Ω–∏–º—É–º {currentPayment.requiredConfirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)
                    </span>
                  </div>
                </div>

                {/* Exchange Rate */}
                <div>
                  <label className="text-sm text-gray-300">–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:</label>
                  <div className="bg-white/5 p-3 rounded mt-1">
                    <span className="text-white">
                      1 {currentPayment.cryptoCurrency} = ‚Ç¨{currentPayment.exchangeRate.toFixed(3)}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Instructions */}
            <div className="glass-card p-4">
              <h4 className="font-semibold text-white mb-3">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h4>
              <ol className="text-sm text-gray-300 space-y-2">
                <li>1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤—ã—à–µ</li>
                <li>2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫</li>
                <li>3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <strong>—Ç–æ—á–Ω—É—é —Å—É–º–º—É</strong> –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å</li>
                <li>4. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ</li>
                <li>5. –í–∞—à —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
              </ol>
              
              <div className="mt-4 p-3 bg-yellow-500/20 border border-yellow-500/50 rounded">
                <div className="text-yellow-300 text-sm font-medium">
                  ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ {currentPayment.cryptoCurrency} –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å!
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Status Check Button */}
        <div className="text-center">
          <button
            onClick={() => window.location.reload()}
            className="px-6 py-3 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-colors"
          >
            üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
          </button>
        </div>
      </div>
    );
  };

  return (
    <div className={`w-full max-w-6xl mx-auto ${className}`}>
      {step === 'select' && renderCurrencySelection()}
      {step === 'payment' && renderPaymentPage()}
    </div>
  );
}
