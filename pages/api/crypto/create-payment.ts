// üí≥ Create Payment API - CRYPTO_BILLING_MODULE
// pages/api/crypto/create-payment.ts

import { NextApiRequest, NextApiResponse } from 'next';
import { requireAuth } from '../../../modules/auth/lib/middleware';
import { 
  CreatePaymentRequest, 
  CreatePaymentResponse, 
  CryptoPayment, 
  ServiceType,
  CryptoCurrency,
  PaymentStatus 
} from '../../../modules/crypto-billing/types/crypto-billing.types';
import { generatePaymentAddress } from '../../../modules/crypto-billing/lib/wallet-generator';
import { getCryptoRate, calculateCryptoPrice } from '../../../modules/crypto-billing/lib/crypto-rates';
import { SYSTEM_CONFIG, getNetworkByCurrency } from '../../../modules/crypto-billing/utils/constants';
import { generatePaymentId } from '../../../modules/crypto-billing/utils/formatters';

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–ª–∞—Ç–µ–∂–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - PostgreSQL)
const tempPayments: CryptoPayment[] = [];

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<CreatePaymentResponse>
) {
  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      message: 'Method not allowed'
    });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await requireAuth(req);
    
    const { serviceType, cryptoCurrency, network }: CreatePaymentRequest = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!serviceType || !cryptoCurrency) {
      return res.status(400).json({
        success: false,
        message: 'serviceType –∏ cryptoCurrency –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    const supportedServices: ServiceType[] = ['wordpress', 'nextjs', 'api', 'database', 'docker', 'static-site'];
    if (!supportedServices.includes(serviceType)) {
      return res.status(400).json({
        success: false,
        message: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞: ${serviceType}`
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    const supportedCurrencies: CryptoCurrency[] = ['USDT', 'USDC', 'BUSD', 'BTC', 'ETH', 'MATIC'];
    if (!supportedCurrencies.includes(cryptoCurrency)) {
      return res.status(400).json({
        success: false,
        message: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: ${cryptoCurrency}`
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userActivePayments = tempPayments.filter(
      p => p.userId === user.userId && ['pending', 'confirming'].includes(p.status)
    );

    if (userActivePayments.length >= 3) {
      return res.status(429).json({
        success: false,
        message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–º–∞–∫—Å–∏–º—É–º 3)'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    const cryptoRate = await getCryptoRate(cryptoCurrency);
    if (!cryptoRate) {
      return res.status(503).json({
        success: false,
        message: '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
    const paymentId = generatePaymentId();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    const walletData = await generatePaymentAddress(cryptoCurrency, paymentId);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    const priceEUR = SYSTEM_CONFIG.SERVICE_PRICE_EUR;
    const priceUSD = priceEUR * 1.09; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å EUR/USD
    const cryptoAmount = calculateCryptoPrice(priceEUR, cryptoRate);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    const qrCodeData = await generateQRCode(walletData.address, cryptoAmount, cryptoCurrency);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    const expiresAt = new Date(Date.now() + SYSTEM_CONFIG.PAYMENT_EXPIRY_MINUTES * 60 * 1000);

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞
    const newPayment: CryptoPayment = {
      id: paymentId,
      userId: user.userId,
      serviceType,
      cryptoCurrency,
      network: network || getNetworkByCurrency(cryptoCurrency),
      
      // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      priceEUR,
      priceUSD,
      cryptoAmount,
      exchangeRate: cryptoRate.priceEUR,
      
      // –ö–æ—à–µ–ª–µ–∫
      paymentAddress: walletData.address,
      privateKey: walletData.privateKey, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
      qrCode: qrCodeData,
      
      // –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      status: 'pending' as PaymentStatus,
      createdAt: new Date(),
      expiresAt,
      confirmations: 0,
      requiredConfirmations: SYSTEM_CONFIG.MIN_CONFIRMATIONS[cryptoCurrency] || 1,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      userAgent: req.headers['user-agent'],
      ipAddress: getClientIP(req)
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
    tempPayments.push(newPayment);

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    console.log(`üí≥ Payment created:`, {
      paymentId,
      userId: user.userId,
      serviceType,
      cryptoCurrency,
      amount: cryptoAmount,
      address: walletData.address
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ (–±–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞)
    const responsePayment: CryptoPayment = {
      ...newPayment,
      privateKey: undefined // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç—É
    };

    return res.status(201).json({
      success: true,
      message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      payment: responsePayment
    });

  } catch (error) {
    console.error('Create payment error:', error);
    
    if (error instanceof Error) {
      if (error.message.startsWith('UNAUTHORIZED')) {
        return res.status(401).json({
          success: false,
          message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
        });
      }
      
      if (error.message.startsWith('FORBIDDEN')) {
        return res.status(403).json({
          success: false,
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
        });
      }
    }
    
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ (–∑–∞–≥–ª—É—à–∫–∞)
 */
async function generateQRCode(address: string, amount: string, currency: CryptoCurrency): Promise<string> {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ qrcode
  // –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º base64 –∑–∞–≥–ª—É—à–∫—É
  
  const qrData = {
    address,
    amount,
    currency,
    timestamp: Date.now()
  };
  
  // –ü—Ä–æ—Å—Ç–∞—è base64 –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö QR
  return Buffer.from(JSON.stringify(qrData)).toString('base64');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
 */
function getClientIP(req: NextApiRequest): string {
  const forwarded = req.headers['x-forwarded-for'];
  
  if (typeof forwarded === 'string') {
    return forwarded.split(',')[0].trim();
  }
  
  return req.socket.remoteAddress || 'unknown';
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export function getUserPayments(userId: string): CryptoPayment[] {
  return tempPayments
    .filter(payment => payment.userId === userId)
    .map(payment => ({ ...payment, privateKey: undefined })); // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
 */
export function getAllPayments(): CryptoPayment[] {
  return tempPayments.map(payment => ({ ...payment, privateKey: undefined }));
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID
 */
export function findPaymentById(paymentId: string): CryptoPayment | null {
  const payment = tempPayments.find(p => p.id === paymentId);
  
  if (payment) {
    return { ...payment, privateKey: undefined };
  }
  
  return null;
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
export function updatePaymentStatus(
  paymentId: string, 
  status: PaymentStatus, 
  updates: Partial<CryptoPayment> = {}
): CryptoPayment | null {
  const paymentIndex = tempPayments.findIndex(p => p.id === paymentId);
  
  if (paymentIndex === -1) return null;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
  tempPayments[paymentIndex] = {
    ...tempPayments[paymentIndex],
    status,
    ...updates,
    updatedAt: new Date()
  };
  
  const updatedPayment = tempPayments[paymentIndex];
  
  console.log(`üìä Payment ${paymentId} status updated to ${status}`);
  
  return { ...updatedPayment, privateKey: undefined };
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
 */
export function cleanupExpiredPayments(): number {
  const now = new Date();
  const initialCount = tempPayments.length;
  
  // –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ expired
  tempPayments.forEach(payment => {
    if (payment.status === 'pending' && payment.expiresAt < now) {
      payment.status = 'expired';
      console.log(`‚è∞ Payment ${payment.id} expired`);
    }
  });
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
  const dayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
  const beforeCleanup = tempPayments.length;
  
  for (let i = tempPayments.length - 1; i >= 0; i--) {
    const payment = tempPayments[i];
    if (payment.status === 'expired' && payment.createdAt < dayAgo) {
      tempPayments.splice(i, 1);
    }
  }
  
  const removedCount = beforeCleanup - tempPayments.length;
  if (removedCount > 0) {
    console.log(`üßπ Removed ${removedCount} old expired payments`);
  }
  
  return initialCount - tempPayments.length;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(cleanupExpiredPayments, 5 * 60 * 1000);
