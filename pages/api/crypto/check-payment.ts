// üîç Check Payment Status API - CRYPTO_BILLING_MODULE
// pages/api/crypto/check-payment.ts

import { NextApiRequest, NextApiResponse } from 'next';
import { 
  CheckPaymentRequest, 
  CheckPaymentResponse, 
  PaymentStatus 
} from '../../../modules/crypto-billing/types/crypto-billing.types';
import { findPaymentById, updatePaymentStatus } from './create-payment';
import { getAddressBalance } from '../../../modules/crypto-billing/lib/wallet-generator';
import { getCryptoRate } from '../../../modules/crypto-billing/lib/crypto-rates';
import { SYSTEM_CONFIG } from '../../../modules/crypto-billing/utils/constants';
import { safeParseFloat } from '../../../modules/crypto-billing/utils/formatters';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<CheckPaymentResponse>
) {
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º GET –∏ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'GET' && req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      payment: null
    });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º paymentId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ body
    let paymentId: string;
    
    if (req.method === 'GET') {
      paymentId = req.query.paymentId as string;
    } else {
      const body: CheckPaymentRequest = req.body;
      paymentId = body.paymentId;
    }

    if (!paymentId) {
      return res.status(400).json({
        success: false,
        payment: null
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂
    let payment = findPaymentById(paymentId);
    if (!payment) {
      return res.status(404).json({
        success: false,
        payment: null
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –ø–ª–∞—Ç–µ–∂
    const now = new Date();
    if (payment.status === 'pending' && payment.expiresAt < now) {
      payment = updatePaymentStatus(paymentId, 'expired');
    }

    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (['completed', 'failed', 'expired'].includes(payment!.status)) {
      return res.status(200).json({
        success: true,
        payment: payment!
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    if (['pending', 'confirming'].includes(payment!.status)) {
      await checkPaymentOnBlockchain(payment!);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
      payment = findPaymentById(paymentId);
    }

    return res.status(200).json({
      success: true,
      payment: payment!,
      transactionInfo: payment!.transactionHash ? {
        hash: payment!.transactionHash,
        confirmations: payment!.confirmations,
        amount: payment!.cryptoAmount,
        timestamp: payment!.confirmedAt || new Date()
      } : undefined
    });

  } catch (error) {
    console.error('Check payment error:', error);
    
    return res.status(500).json({
      success: false,
      payment: null
    });
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
 */
async function checkPaymentOnBlockchain(payment: any) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–¥—Ä–µ—Å–∞
    const balance = await getAddressBalance(payment.paymentAddress, payment.cryptoCurrency);
    const balanceAmount = safeParseFloat(balance, 0);
    const requiredAmount = safeParseFloat(payment.cryptoAmount, 0);

    console.log(`üîç Checking payment ${payment.id}:`, {
      address: payment.paymentAddress,
      currency: payment.cryptoCurrency,
      balance: balanceAmount,
      required: requiredAmount
    });

    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π
    if (balanceAmount >= requiredAmount) {
      
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â–µ pending, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ confirming
      if (payment.status === 'pending') {
        updatePaymentStatus(payment.id, 'confirming', {
          transactionHash: generateFakeTransactionHash(payment.cryptoCurrency),
          confirmations: 0
        });
        
        console.log(`üí∞ Payment ${payment.id} received, waiting for confirmations`);
      }
      
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å confirming, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      if (payment.status === 'confirming') {
        const currentConfirmations = await getCurrentConfirmations(payment.cryptoCurrency);
        const requiredConfirmations = payment.requiredConfirmations;
        
        updatePaymentStatus(payment.id, 'confirming', {
          confirmations: currentConfirmations
        });
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ confirmed
        if (currentConfirmations >= requiredConfirmations) {
          updatePaymentStatus(payment.id, 'confirmed', {
            confirmedAt: new Date()
          });
          
          console.log(`‚úÖ Payment ${payment.id} confirmed with ${currentConfirmations} confirmations`);
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
          await activateService(payment);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–ø–ª–∞—Ç—É
    if (balanceAmount > requiredAmount * 1.1) { // –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ –±–æ–ª—å—à–µ 10%
      console.warn(`‚ö†Ô∏è Overpayment detected for ${payment.id}: ${balanceAmount} vs ${requiredAmount}`);
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∏–∑–ª–∏—à–∫–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
    }

  } catch (error) {
    console.error(`Error checking payment ${payment.id} on blockchain:`, error);
    
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const maxWaitTime = SYSTEM_CONFIG.MAX_CONFIRMATION_TIME[payment.cryptoCurrency] || 60;
    const waitTime = (new Date().getTime() - payment.createdAt.getTime()) / (1000 * 60);
    
    if (waitTime > maxWaitTime) {
      updatePaymentStatus(payment.id, 'failed', {
        failureReason: 'Blockchain check timeout'
      });
    }
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ
 */
function generateFakeTransactionHash(currency: string): string {
  const prefix = currency === 'BTC' ? '' : '0x';
  const length = currency === 'BTC' ? 64 : 64;
  
  let hash = prefix;
  for (let i = 0; i < length; i++) {
    hash += Math.floor(Math.random() * 16).toString(16);
  }
  
  return hash;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π (—Å–∏–º—É–ª—è—Ü–∏—è)
 */
async function getCurrentConfirmations(currency: string): Promise<number> {
  // –î–ª—è –¥–µ–º–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
  const minConfirmations = SYSTEM_CONFIG.MIN_CONFIRMATIONS[currency] || 1;
  const random = Math.random();
  
  if (random < 0.3) return 0;
  if (random < 0.6) return Math.floor(minConfirmations / 2);
  if (random < 0.9) return minConfirmations;
  return minConfirmations + Math.floor(Math.random() * 5);
}

/**
 * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
 */
async function activateService(payment: any) {
  try {
    console.log(`üöÄ Activating service ${payment.serviceType} for payment ${payment.id}`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
    await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥—ã "–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
    
    const serviceDetails = {
      type: payment.serviceType,
      endpoint: generateServiceEndpoint(payment.serviceType),
      credentials: generateServiceCredentials(payment.serviceType)
    };
    
    updatePaymentStatus(payment.id, 'completed', {
      completedAt: new Date(),
      serviceDetails
    });
    
    console.log(`‚úÖ Service ${payment.serviceType} activated for payment ${payment.id}`);
    
    // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Railway API –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    
  } catch (error) {
    console.error(`Failed to activate service for payment ${payment.id}:`, error);
    
    updatePaymentStatus(payment.id, 'failed', {
      failureReason: 'Service activation failed'
    });
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è endpoint –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
 */
function generateServiceEndpoint(serviceType: string): string {
  const subdomain = `${serviceType}-${Math.random().toString(36).substring(2, 8)}`;
  return `https://${subdomain}.railway.app`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
 */
function generateServiceCredentials(serviceType: string): Record<string, string> {
  const baseCredentials = {
    serviceId: `srv_${Math.random().toString(36).substring(2, 10)}`,
    apiKey: `key_${Math.random().toString(36).substring(2, 20)}`,
  };
  
  switch (serviceType) {
    case 'wordpress':
      return {
        ...baseCredentials,
        adminUsername: 'admin',
        adminPassword: Math.random().toString(36).substring(2, 12),
        dbHost: 'localhost',
        dbName: `wp_${Math.random().toString(36).substring(2, 8)}`
      };
    
    case 'database':
      return {
        ...baseCredentials,
        dbHost: `db-${Math.random().toString(36).substring(2, 8)}.railway.app`,
        dbPort: '5432',
        dbUser: 'postgres',
        dbPassword: Math.random().toString(36).substring(2, 16),
        dbName: `db_${Math.random().toString(36).substring(2, 8)}`
      };
    
    case 'api':
      return {
        ...baseCredentials,
        apiEndpoint: `https://api-${Math.random().toString(36).substring(2, 8)}.railway.app`,
        authToken: `token_${Math.random().toString(36).substring(2, 24)}`
      };
    
    default:
      return baseCredentials;
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
 */
export async function checkAllActivePayments() {
  const { getAllPayments } = await import('./create-payment');
  const allPayments = getAllPayments();
  
  const activePayments = allPayments.filter(p => 
    ['pending', 'confirming'].includes(p.status)
  );
  
  console.log(`üîÑ Checking ${activePayments.length} active payments`);
  
  for (const payment of activePayments) {
    await checkPaymentOnBlockchain(payment);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(checkAllActivePayments, 30 * 1000);
