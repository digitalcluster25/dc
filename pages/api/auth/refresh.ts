// üîÑ Refresh Token API Endpoint - AUTH_MODULE
// pages/api/auth/refresh.ts

import { NextApiRequest, NextApiResponse } from 'next';
import { verifyRefreshToken, createAccessToken, createRefreshToken } from '../../../modules/auth/lib/jwt';
import { RefreshTokenRequest, RefreshTokenResponse } from '../../../modules/auth/types/auth.types';
import { findUserById } from './register';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<RefreshTokenResponse>
) {
  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      message: 'Method not allowed'
    });
  }

  try {
    const { refreshToken }: RefreshTokenRequest = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!refreshToken) {
      return res.status(400).json({
        success: false,
        message: 'Refresh token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è refresh token
    const payload = await verifyRefreshToken(refreshToken);
    if (!payload) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = findUserById(payload.userId);
    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ refresh token —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –æ—Ç–æ–∑–≤–∞–Ω

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    const tokenPayload = {
      userId: user.id,
      email: user.email,
      role: user.role
    };

    const newAccessToken = await createAccessToken(tokenPayload);
    const newRefreshToken = await createRefreshToken(tokenPayload);

    // TODO: –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π refresh token –∏–∑ –±–∞–∑—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π

    return res.status(200).json({
      success: true,
      accessToken: newAccessToken,
      refreshToken: newRefreshToken
    });

  } catch (error) {
    console.error('Token refresh error:', error);
    
    return res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞'
    });
  }
}
