// üîê Login API Endpoint - AUTH_MODULE
// pages/api/auth/login.ts

import { NextApiRequest, NextApiResponse } from 'next';
import { verifyPassword } from '../../../modules/auth/lib/password';
import { createAccessToken, createRefreshToken } from '../../../modules/auth/lib/jwt';
import { LoginRequest, LoginResponse } from '../../../modules/auth/types/auth.types';
import { findUserByEmail, updateUser } from './register';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<LoginResponse>
) {
  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      message: 'Method not allowed'
    });
  }

  try {
    const { email, password }: LoginRequest = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = findUserByEmail(email);
    if (!user) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isPasswordValid = await verifyPassword(password, user.passwordHash);
    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const requireEmailVerification = process.env.REQUIRE_EMAIL_VERIFICATION === 'true';
    if (requireEmailVerification && !user.emailVerified) {
      return res.status(403).json({
        success: false,
        message: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É'
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    const tokenPayload = {
      userId: user.id,
      email: user.email,
      role: user.role
    };

    const accessToken = await createAccessToken(tokenPayload);
    const refreshToken = await createRefreshToken(tokenPayload);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    updateUser(user.id, {
      lastLoginAt: new Date()
    });

    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å refresh token –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–∑—ã–≤–∞

    // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    return res.status(200).json({
      success: true,
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        emailVerified: user.emailVerified,
        lastLoginAt: new Date(),
        createdAt: user.createdAt,
        updatedAt: new Date()
      },
      accessToken,
      refreshToken
    });

  } catch (error) {
    console.error('Login error:', error);
    
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
}

// Rate limiting –¥–ª—è login endpoint
const loginAttempts = new Map<string, { count: number; lastAttempt: number }>();

export function checkLoginRateLimit(ip: string): boolean {
  const now = Date.now();
  const maxAttempts = 5;
  const windowMs = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç

  const attempts = loginAttempts.get(ip);
  
  if (!attempts) {
    loginAttempts.set(ip, { count: 1, lastAttempt: now });
    return true;
  }

  // –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–∫–Ω–æ
  if (now - attempts.lastAttempt > windowMs) {
    loginAttempts.set(ip, { count: 1, lastAttempt: now });
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
  if (attempts.count >= maxAttempts) {
    return false;
  }

  // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
  attempts.count++;
  attempts.lastAttempt = now;
  return true;
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π rate limiting
setInterval(() => {
  const now = Date.now();
  const windowMs = 15 * 60 * 1000;
  
  for (const [ip, attempts] of loginAttempts.entries()) {
    if (now - attempts.lastAttempt > windowMs) {
      loginAttempts.delete(ip);
    }
  }
}, 5 * 60 * 1000); // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
